<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.AspNetCore.Identity</name>
    </assembly>
    <members>
        <member name="T:Microsoft.AspNetCore.Builder.BuilderExtensions">
            <summary>
            Identity extensions for <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.BuilderExtensions.UseIdentity(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Enables ASP.NET identity for the current application.
            </summary>
            <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/> instance this method extends.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/> instance this method extends.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.IdentityOptions">
            <summary>
            Represents all the options you can use to configure the identity system.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Builder.IdentityOptions.ClaimsIdentity">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AspNetCore.Identity.ClaimsIdentityOptions"/> for the identity system.
            </summary>
            <value>
            The <see cref="T:Microsoft.AspNetCore.Identity.ClaimsIdentityOptions"/> for the identity system.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Builder.IdentityOptions.User">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AspNetCore.Identity.UserOptions"/> for the identity system.
            </summary>
            <value>
            The <see cref="T:Microsoft.AspNetCore.Identity.UserOptions"/> for the identity system.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Builder.IdentityOptions.Password">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AspNetCore.Identity.PasswordOptions"/> for the identity system.
            </summary>
            <value>
            The <see cref="T:Microsoft.AspNetCore.Identity.PasswordOptions"/> for the identity system.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Builder.IdentityOptions.Lockout">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AspNetCore.Identity.LockoutOptions"/> for the identity system.
            </summary>
            <value>
            The <see cref="T:Microsoft.AspNetCore.Identity.LockoutOptions"/> for the identity system.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Builder.IdentityOptions.SignIn">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AspNetCore.Identity.SignInOptions"/> for the identity system.
            </summary>
            <value>
            The <see cref="T:Microsoft.AspNetCore.Identity.SignInOptions"/> for the identity system.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Builder.IdentityOptions.Cookies">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AspNetCore.Identity.IdentityCookieOptions"/> for the identity system.
            </summary>
            <value>
            The <see cref="T:Microsoft.AspNetCore.Identity.IdentityCookieOptions"/> for the identity system.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Builder.IdentityOptions.Tokens">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AspNetCore.Identity.TokenOptions"/> for the identity system.
            </summary>
            <value>
            The <see cref="T:Microsoft.AspNetCore.Identity.TokenOptions"/> for the identity system.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Builder.IdentityOptions.SecurityStampValidationInterval">
            <summary>
            Gets or sets the <see cref="T:System.TimeSpan"/> after which security stamps are re-validated.
            </summary>
            <value>
            The <see cref="T:System.TimeSpan"/> after which security stamps are re-validated.
            </value>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.ClaimsIdentityOptions">
            <summary>
            Options used to configure the claim types used for well known claims.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.ClaimsIdentityOptions.RoleClaimType">
            <summary>
            Gets or sets the ClaimType used for a Role claim.
            </summary>
            <remarks>
            This defaults to <see cref="F:System.Security.Claims.ClaimTypes.Role"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.ClaimsIdentityOptions.UserNameClaimType">
            <summary>
            Gets or sets the ClaimType used for the user name claim.
            </summary>
            <remarks>
            This defaults to <see cref="F:System.Security.Claims.ClaimTypes.Name"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.ClaimsIdentityOptions.UserIdClaimType">
            <summary>
            Gets or sets the ClaimType used for the user identifier claim.
            </summary>
            <remarks>
            This defaults to <see cref="F:System.Security.Claims.ClaimTypes.NameIdentifier"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.ClaimsIdentityOptions.SecurityStampClaimType">
            <summary>
            Gets or sets the ClaimType used for the security stamp claim..
            </summary>
            <remarks>
            This defaults to "AspNet.Identity.SecurityStamp".
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1">
            <summary>
            Provides protection and validation of identity tokens.
            </summary>
            <typeparam name="TUser">The type used to represent a user.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1.#ctor(Microsoft.AspNetCore.DataProtection.IDataProtectionProvider,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Identity.DataProtectionTokenProviderOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1"/> class.
            </summary>
            <param name="dataProtectionProvider">The system data protection provider.</param>
            <param name="options">The configured <see cref="T:Microsoft.AspNetCore.Identity.DataProtectionTokenProviderOptions"/>.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1.Options">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Identity.DataProtectionTokenProviderOptions"/> for this instance.
            </summary>
            <value>
            The <see cref="T:Microsoft.AspNetCore.Identity.DataProtectionTokenProviderOptions"/> for this instance.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1.Protector">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtector"/> for this instance.
            </summary>
            <value>
            The <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtector"/> for this instance.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1.Name">
            <summary>
            Gets the name of this instance.
            </summary>
            <value>
            The name of this instance.
            </value>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1.GenerateAsync(System.String,Microsoft.AspNetCore.Identity.UserManager{`0},`0)">
            <summary>
            Generates a protected token for the specified <paramref name="user"/> as an asynchronous operation.
            </summary>
            <param name="purpose">The purpose the token will be used for.</param>
            <param name="manager">The <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> to retrieve user properties from.</param>
            <param name="user">The <typeparamref name="TUser"/> the token will be generated from.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the generated token.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1.ValidateAsync(System.String,System.String,Microsoft.AspNetCore.Identity.UserManager{`0},`0)">
            <summary>
            Validates the protected <paramref name="token"/> for the specified <paramref name="user"/> and <paramref name="purpose"/> as an asynchronous operation.
            </summary>
            <param name="purpose">The purpose the token was be used for.</param>
            <param name="token">The token to validate.</param>
            <param name="manager">The <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> to retrieve user properties from.</param>
            <param name="user">The <typeparamref name="TUser"/> the token was generated for.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the result of the asynchronous validation,
            containing true if the token is valid, otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1.CanGenerateTwoFactorTokenAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> indicating whether a token generated by this instance
            can be used as a Two Factor Authentication token as an asynchronous operation.
            </summary>
            <param name="manager">The <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> to retrieve user properties from.</param>
            <param name="user">The <typeparamref name="TUser"/> the token was generated for.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the result of the asynchronous query,
            containing true if a token generated by this instance can be used as a Two Factor Authentication token, otherwise false.
            </returns>
            <remarks>This method will always return false for instances of <see cref="T:Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1"/>.</remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.StreamExtensions">
            <summary>
            Utility extensions to streams
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.DataProtectionTokenProviderOptions">
            <summary>
            Contains options for the <see cref="T:Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.DataProtectionTokenProviderOptions.Name">
            <summary>
            Gets or sets the name of the <see cref="T:Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1"/>.
            </summary>
            <value>
            The name of the <see cref="T:Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1"/>.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.DataProtectionTokenProviderOptions.TokenLifespan">
            <summary>
            Gets or sets the amount of time a generated token remains valid.
            </summary>
            <value>
            The amount of time a generated token remains valid.
            </value>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.EmailTokenProvider`1">
            <summary>
            TokenProvider that generates tokens from the user's security stamp and notifies a user via email.
            </summary>
            <typeparam name="TUser">The type used to represent a user.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.EmailTokenProvider`1.CanGenerateTwoFactorTokenAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0)">
            <summary>
            Checks if a two factor authentication token can be generated for the specified <paramref name="user"/>.
            </summary>
            <param name="manager">The <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> to retrieve the <paramref name="user"/> from.</param>
            <param name="user">The <typeparamref name="TUser"/> to check for the possibility of generating a two factor authentication token.</param>
            <returns>True if the user has an email address set, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.EmailTokenProvider`1.GetUserModifierAsync(System.String,Microsoft.AspNetCore.Identity.UserManager{`0},`0)">
            <summary>
            Returns the a value for the user used as entropy in the generated token.
            </summary>
            <param name="purpose">The purpose of the two factor authentication token.</param>
            <param name="manager">The <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> to retrieve the <paramref name="user"/> from.</param>
            <param name="user">The <typeparamref name="TUser"/> to check for the possibility of generating a two factor authentication token.</param>
            <returns>A string suitable for use as entropy in token generation.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.ExternalLoginInfo">
            <summary>
            Represents login information, source and externally source principal for a user record
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.ExternalLoginInfo.#ctor(System.Security.Claims.ClaimsPrincipal,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNetCore.Identity.ExternalLoginInfo"/>
            </summary>
            <param name="principal">The <see cref="T:System.Security.Claims.ClaimsPrincipal"/> to associate with this login.</param>
            <param name="loginProvider">The provider associated with this login information.</param>
            <param name="providerKey">The unique identifier for this user provided by the login provider.</param>
            <param name="displayName">The display name for this user provided by the login provider.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.ExternalLoginInfo.Principal">
            <summary>
            Gets or sets the <see cref="T:System.Security.Claims.ClaimsPrincipal"/> associated with this login.
            </summary>
            <value>The <see cref="T:System.Security.Claims.ClaimsPrincipal"/> associated with this login.</value>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.IdentityBuilder">
            <summary>
            Helper functions for configuring identity services.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityBuilder.#ctor(System.Type,System.Type,Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNetCore.Identity.IdentityBuilder"/>.
            </summary>
            <param name="user">The <see cref="T:System.Type"/> to use for the users.</param>
            <param name="role">The <see cref="T:System.Type"/> to use for the roles.</param>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to attach to.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.IdentityBuilder.UserType">
            <summary>
            Gets the <see cref="T:System.Type"/> used for users.
            </summary>
            <value>
            The <see cref="T:System.Type"/> used for users.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.IdentityBuilder.RoleType">
            <summary>
            Gets the <see cref="T:System.Type"/> used for roles.
            </summary>
            <value>
            The <see cref="T:System.Type"/> used for roles.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.IdentityBuilder.Services">
            <summary>
            Gets the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> services are attached to.
            </summary>
            <value>
            The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> services are attached to.
            </value>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityBuilder.AddUserValidator``1">
            <summary>
            Adds an <see cref="T:Microsoft.AspNetCore.Identity.IUserValidator`1"/> for the <seealso cref="P:Microsoft.AspNetCore.Identity.IdentityBuilder.UserType"/>.
            </summary>
            <typeparam name="T">The user type to validate.</typeparam>
            <returns>The current <see cref="T:Microsoft.AspNetCore.Identity.IdentityBuilder"/> instance.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityBuilder.AddRoleValidator``1">
            <summary>
            Adds an <see cref="T:Microsoft.AspNetCore.Identity.IRoleValidator`1"/> for the <seealso cref="P:Microsoft.AspNetCore.Identity.IdentityBuilder.RoleType"/>.
            </summary>
            <typeparam name="T">The role type to validate.</typeparam>
            <returns>The current <see cref="T:Microsoft.AspNetCore.Identity.IdentityBuilder"/> instance.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityBuilder.AddErrorDescriber``1">
            <summary>
            Adds an <see cref="T:Microsoft.AspNetCore.Identity.IdentityErrorDescriber"/>.
            </summary>
            <typeparam name="TDescriber">The type of the error describer.</typeparam>
            <returns>The current <see cref="T:Microsoft.AspNetCore.Identity.IdentityBuilder"/> instance.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityBuilder.AddPasswordValidator``1">
            <summary>
            Adds an <see cref="T:Microsoft.AspNetCore.Identity.IPasswordValidator`1"/> for the <seealso cref="P:Microsoft.AspNetCore.Identity.IdentityBuilder.UserType"/>.
            </summary>
            <typeparam name="T">The user type whose password will be validated.</typeparam>
            <returns>The current <see cref="T:Microsoft.AspNetCore.Identity.IdentityBuilder"/> instance.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityBuilder.AddUserStore``1">
            <summary>
            Adds an <see cref="T:Microsoft.AspNetCore.Identity.IUserStore`1"/> for the <seealso cref="P:Microsoft.AspNetCore.Identity.IdentityBuilder.UserType"/>.
            </summary>
            <typeparam name="T">The user type whose password will be validated.</typeparam>
            <returns>The current <see cref="T:Microsoft.AspNetCore.Identity.IdentityBuilder"/> instance.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityBuilder.AddRoleStore``1">
            <summary>
            Adds a <see cref="T:Microsoft.AspNetCore.Identity.IRoleStore`1"/> for the <seealso cref="P:Microsoft.AspNetCore.Identity.IdentityBuilder.RoleType"/>.
            </summary>
            <typeparam name="T">The role type held in the store.</typeparam>
            <returns>The current <see cref="T:Microsoft.AspNetCore.Identity.IdentityBuilder"/> instance.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityBuilder.AddTokenProvider``1(System.String)">
            <summary>
            Adds a token provider.
            </summary>
            <typeparam name="TProvider">The type of the token provider to add.</typeparam>
            <param name="providerName">The name of the provider to add.</param>
            <returns>The current <see cref="T:Microsoft.AspNetCore.Identity.IdentityBuilder"/> instance.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityBuilder.AddTokenProvider(System.String,System.Type)">
            <summary>
            Adds a token provider for the <seealso cref="P:Microsoft.AspNetCore.Identity.IdentityBuilder.UserType"/>.
            </summary>
            <param name="providerName">The name of the provider to add.</param>
            <param name="provider">The type of the <see cref="T:Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1"/> to add.</param>
            <returns>The current <see cref="T:Microsoft.AspNetCore.Identity.IdentityBuilder"/> instance.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityBuilder.AddDefaultTokenProviders">
            <summary>
            Adds the default token providers used to generate tokens for reset passwords, change email
            and change telephone number operations, and for two factor authentication token generation.
            </summary>
            <returns>The current <see cref="T:Microsoft.AspNetCore.Identity.IdentityBuilder"/> instance.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityBuilder.AddUserManager``1">
            <summary>
            Adds a <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> for the <seealso cref="P:Microsoft.AspNetCore.Identity.IdentityBuilder.UserType"/>.
            </summary>
            <typeparam name="TUserManager">The type of the user manager to add.</typeparam>
            <returns>The current <see cref="T:Microsoft.AspNetCore.Identity.IdentityBuilder"/> instance.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityBuilder.AddRoleManager``1">
            <summary>
            Adds a <see cref="T:Microsoft.AspNetCore.Identity.RoleManager`1"/> for the <seealso cref="P:Microsoft.AspNetCore.Identity.IdentityBuilder.RoleType"/>.
            </summary>
            <typeparam name="TRoleManager">The type of the role manager to add.</typeparam>
            <returns>The current <see cref="T:Microsoft.AspNetCore.Identity.IdentityBuilder"/> instance.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.IdentityCookieOptions">
            <summary>
            Represents all the options you can use to configure the cookies middleware uesd by the identity system.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.IdentityCookieOptions.ApplicationCookieAuthenticationScheme">
            <summary>
            Gets the scheme used to identify application authentication cookies.
            </summary>
            <value>The scheme used to identify application authentication cookies.</value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.IdentityCookieOptions.ExternalCookieAuthenticationScheme">
            <summary>
            Gets the scheme used to identify external authentication cookies.
            </summary>
            <value>The scheme used to identify external authentication cookies.</value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.IdentityCookieOptions.TwoFactorUserIdCookieAuthenticationScheme">
            <summary>
            Gets the scheme used to identify Two Factor authentication cookies for round tripping user identities.
            </summary>
            <value>The scheme used to identify user identity 2fa authentication cookies.</value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.IdentityCookieOptions.TwoFactorRememberMeCookieAuthenticationScheme">
            <summary>
            Gets the scheme used to identify Two Factor authentication cookies for saving the Remember Me state.
            </summary>
            <value>The scheme used to identify remember me application authentication cookies.</value>        
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.IdentityError">
            <summary>
            Encapsulates an error from the identity subsystem.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.IdentityError.Code">
            <summary>
            Gets or sets the code for this error.
            </summary>
            <value>
            The code for this error.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.IdentityError.Description">
            <summary>
            Gets or sets the description for this error.
            </summary>
            <value>
            The description for this error.
            </value>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.IdentityErrorDescriber">
            <summary>
            Service to enable localization for application facing identity errors.
            </summary>
            <remarks>
            These errors are returned to controllers and are generally used as display messages to end users.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityErrorDescriber.DefaultError">
            <summary>
            Returns the default <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/>.
            </summary>
            <returns>The default <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/>,</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityErrorDescriber.ConcurrencyFailure">
            <summary>
            Returns an <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating a concurrency failure.
            </summary>
            <returns>An <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating a concurrency failure.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityErrorDescriber.PasswordMismatch">
            <summary>
            Returns an <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating a password mismatch.
            </summary>
            <returns>An <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating a password mismatch.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityErrorDescriber.InvalidToken">
            <summary>
            Returns an <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating an invalid token.
            </summary>
            <returns>An <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating an invalid token.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityErrorDescriber.LoginAlreadyAssociated">
            <summary>
            Returns an <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating an external login is already associated with an account.
            </summary>
            <returns>An <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating an external login is already associated with an account.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityErrorDescriber.InvalidUserName(System.String)">
            <summary>
            Returns an <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating the specified user <paramref name="userName"/> is invalid.
            </summary>
            <param name="userName">The user name that is invalid.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating the specified user <paramref name="userName"/> is invalid.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityErrorDescriber.InvalidEmail(System.String)">
            <summary>
            Returns an <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating the specified <paramref name="email"/> is invalid.
            </summary>
            <param name="email">The email that is invalid.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating the specified <paramref name="email"/> is invalid.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityErrorDescriber.DuplicateUserName(System.String)">
            <summary>
            Returns an <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating the specified <paramref name="userName"/> already exists.
            </summary>
            <param name="userName">The user name that already exists.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating the specified <paramref name="userName"/> already exists.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityErrorDescriber.DuplicateEmail(System.String)">
            <summary>
            Returns an <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating the specified <paramref name="email"/> is already associated with an account.
            </summary>
            <param name="email">The email that is already associated with an account.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating the specified <paramref name="email"/> is already associated with an account.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityErrorDescriber.InvalidRoleName(System.String)">
            <summary>
            Returns an <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating the specified <paramref name="role"/> name is invalid.
            </summary>
            <param name="role">The invalid role.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating the specific role <paramref name="role"/> name is invalid.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityErrorDescriber.DuplicateRoleName(System.String)">
            <summary>
            Returns an <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating the specified <paramref name="role"/> name already exists.
            </summary>
            <param name="role">The duplicate role.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating the specific role <paramref name="role"/> name already exists.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityErrorDescriber.UserAlreadyHasPassword">
            <summary>
            Returns an <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating a user already has a password.
            </summary>
            <returns>An <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating a user already has a password.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityErrorDescriber.UserLockoutNotEnabled">
            <summary>
            Returns an <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating user lockout is not enabled.
            </summary>
            <returns>An <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating user lockout is not enabled..</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityErrorDescriber.UserAlreadyInRole(System.String)">
            <summary>
            Returns an <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating a user is already in the specified <paramref name="role"/>.
            </summary>
            <param name="role">The duplicate role.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating a user is already in the specified <paramref name="role"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityErrorDescriber.UserNotInRole(System.String)">
            <summary>
            Returns an <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating a user is not in the specified <paramref name="role"/>.
            </summary>
            <param name="role">The duplicate role.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating a user is not in the specified <paramref name="role"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityErrorDescriber.PasswordTooShort(System.Int32)">
            <summary>
            Returns an <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating a password of the specified <paramref name="length"/> does not meet the minimum length requirements.
            </summary>
            <param name="length">The length that is not long enough.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating a password of the specified <paramref name="length"/> does not meet the minimum length requirements.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityErrorDescriber.PasswordRequiresNonAlphanumeric">
            <summary>
            Returns an <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating a password entered does not contain a non-alphanumeric character, which is required by the password policy.
            </summary>
            <returns>An <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating a password entered does not contain a non-alphanumeric character.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityErrorDescriber.PasswordRequiresDigit">
            <summary>
            Returns an <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating a password entered does not contain a numeric character, which is required by the password policy.
            </summary>
            <returns>An <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating a password entered does not contain a numeric character.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityErrorDescriber.PasswordRequiresLower">
            <summary>
            Returns an <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating a password entered does not contain a lower case letter, which is required by the password policy.
            </summary>
            <returns>An <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating a password entered does not contain a lower case letter.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityErrorDescriber.PasswordRequiresUpper">
            <summary>
            Returns an <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating a password entered does not contain an upper case letter, which is required by the password policy.
            </summary>
            <returns>An <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/> indicating a password entered does not contain an upper case letter.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.IdentityMarkerService">
            <summary>
            Used to verify AddIdentity was called on a ServiceCollection
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.IdentityResult">
            <summary>
            Represents the result of an identity operation.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.IdentityResult.Succeeded">
            <summary>
            Flag indicating whether if the operation succeeded or not.
            </summary>
            <value>True if the operation succeeded, otherwise false.</value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.IdentityResult.Errors">
            <summary>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/>s containing an errors
            that occurred during the identity operation.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/>s.</value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.IdentityResult.Success">
            <summary>
            Returns an <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> indicating a successful identity operation.
            </summary>
            <returns>An <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> indicating a successful operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityResult.Failed(Microsoft.AspNetCore.Identity.IdentityError[])">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> indicating a failed identity operation, with a list of <paramref name="errors"/> if applicable.
            </summary>
            <param name="errors">An optional array of <see cref="T:Microsoft.AspNetCore.Identity.IdentityError"/>s which caused the operation to fail.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> indicating a failed identity operation, with a list of <paramref name="errors"/> if applicable.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IdentityResult.ToString">
            <summary>
            Converts the value of the current <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> object to its equivalent string representation.
            </summary>
            <returns>A string representation of the current <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> object.</returns>
            <remarks>
            If the operation was successful the ToString() will return "Succeeded" otherwise it returned 
            "Failed : " followed by a comma delimited list of error codes from its <see cref="P:Microsoft.AspNetCore.Identity.IdentityResult.Errors"/> collection, if any.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.ILookupNormalizer">
            <summary>
            Provides an abstraction for normalizing keys for lookup purposes.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.ILookupNormalizer.Normalize(System.String)">
            <summary>
            Returns a normalized representation of the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key to normalize.</param>
            <returns>A normalized representation of the specified <paramref name="key"/>.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.IPasswordHasher`1">
            <summary>
            Provides an abstraction for hashing passwords.
            </summary>
            <typeparam name="TUser">The type used to represent a user.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IPasswordHasher`1.HashPassword(`0,System.String)">
            <summary>
            Returns a hashed representation of the supplied <paramref name="password"/> for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose password is to be hashed.</param>
            <param name="password">The password to hash.</param>
            <returns>A hashed representation of the supplied <paramref name="password"/> for the specified <paramref name="user"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IPasswordHasher`1.VerifyHashedPassword(`0,System.String,System.String)">
            <summary>
            Returns a <see cref="T:Microsoft.AspNetCore.Identity.PasswordVerificationResult"/> indicating the result of a password hash comparison.
            </summary>
            <param name="user">The user whose password should be verified.</param>
            <param name="hashedPassword">The hash value for a user's stored password.</param>
            <param name="providedPassword">The password supplied for comparison.</param>
            <returns>A <see cref="T:Microsoft.AspNetCore.Identity.PasswordVerificationResult"/> indicating the result of a password hash comparison.</returns>
            <remarks>Implementations of this method should be time consistent.</remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.IPasswordValidator`1">
            <summary>
            Provides an abstraction for validating passwords.
            </summary>
            <typeparam name="TUser">The type that represents a user.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IPasswordValidator`1.ValidateAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0,System.String)">
            <summary>
            Validates a password as an asynchronous operation.
            </summary>
            <param name="manager">The <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> to retrieve the <paramref name="user"/> properties from.</param>
            <param name="user">The user whose password should be validated.</param>
            <param name="password">The password supplied for validation</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.IQueryableRoleStore`1">
            <summary>
            Provides an abstraction for querying roles in a Role store.
            </summary>
            <typeparam name="TRole">The type encapsulating a role.</typeparam>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.IQueryableRoleStore`1.Roles">
            <summary>
            Returns an <see cref="T:System.Linq.IQueryable`1"/> collection of roles.
            </summary>
            <value>An <see cref="T:System.Linq.IQueryable`1"/> collection of roles.</value>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.IQueryableUserStore`1">
            <summary>
            Provides an abstraction for querying roles in a User store.
            </summary>
            <typeparam name="TUser">The type encapsulating a user.</typeparam>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.IQueryableUserStore`1.Users">
            <summary>
            Returns an <see cref="T:System.Linq.IQueryable`1"/> collection of users.
            </summary>
            <value>An <see cref="T:System.Linq.IQueryable`1"/> collection of users.</value>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.IRoleClaimStore`1">
            <summary>
            Provides an abstraction for a store of role specific claims.
            </summary>
            <typeparam name="TRole">The type encapsulating a role.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IRoleClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)">
            <summary>
             Gets a list of <see cref="T:System.Security.Claims.Claim"/>s to be belonging to the specified <paramref name="role"/> as an asynchronous operation.
            </summary>
            <param name="role">The role whose claims to retrieve.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the result of the asynchronous query, a list of <see cref="T:System.Security.Claims.Claim"/>s.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IRoleClaimStore`1.AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)">
            <summary>
            Add a new claim to a role as an asynchronous operation.
            </summary>
            <param name="role">The role to add a claim to.</param>
            <param name="claim">The <see cref="T:System.Security.Claims.Claim"/> to add.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IRoleClaimStore`1.RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)">
            <summary>
            Remove a claim from a role as an asynchronous operation.
            </summary>
            <param name="role">The role to remove the claim from.</param>
            <param name="claim">The <see cref="T:System.Security.Claims.Claim"/> to remove.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.IRoleStore`1">
            <summary>
            Provides an abstraction for a storage and management of roles.
            </summary>
            <typeparam name="TRole">The type that represents a role.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IRoleStore`1.CreateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Creates a new role in a store as an asynchronous operation.
            </summary>
            <param name="role">The role to create in the store.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> of the asynchronous query.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IRoleStore`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Updates a role in a store as an asynchronous operation.
            </summary>
            <param name="role">The role to update in the store.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> of the asynchronous query.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IRoleStore`1.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Deletes a role from the store as an asynchronous operation.
            </summary>
            <param name="role">The role to delete from the store.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> of the asynchronous query.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Gets the ID for a role from the store as an asynchronous operation.
            </summary>
            <param name="role">The role whose ID should be returned.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that contains the ID of the role.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleNameAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Gets the name of a role from the store as an asynchronous operation.
            </summary>
            <param name="role">The role whose name should be returned.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that contains the name of the role.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IRoleStore`1.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the name of a role in the store as an asynchronous operation.
            </summary>
            <param name="role">The role whose name should be set.</param>
            <param name="roleName">The name of the role.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IRoleStore`1.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Get a role's normalized name as an asynchronous operation.
            </summary>
            <param name="role">The role whose normalized name should be retrieved.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that contains the name of the role.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IRoleStore`1.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Set a role's normalized name as an asynchronous operation.
            </summary>
            <param name="role">The role whose normalized name should be set.</param>
            <param name="normalizedName">The normalized name to set</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IRoleStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds the role who has the specified ID as an asynchronous operation.
            </summary>
            <param name="roleId">The role ID to look for.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that result of the look up.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IRoleStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds the role who has the specified normalized name as an asynchronous operation.
            </summary>
            <param name="normalizedRoleName">The normalized role name to look for.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that result of the look up.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.IRoleValidator`1">
            <summary>
            Provides an abstraction for a validating a role.
            </summary>
            <typeparam name="TRole">The type encapsulating a role.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IRoleValidator`1.ValidateAsync(Microsoft.AspNetCore.Identity.RoleManager{`0},`0)">
            <summary>
            Validates a role as an asynchronous operation.
            </summary>
            <param name="manager">The <see cref="T:Microsoft.AspNetCore.Identity.RoleManager`1"/> managing the role store.</param>
            <param name="role">The role to validate.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> of the asynchronous validation.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.ISecurityStampValidator">
            <summary>
            Provides an abstraction for a validating a security stamp of an incoming identity, and regenerating or rejecting the 
            identity based on the validation result.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.ISecurityStampValidator.ValidateAsync(Microsoft.AspNetCore.Authentication.Cookies.CookieValidatePrincipalContext)">
            <summary>
            Validates a security stamp of an identity as an asynchronous operation, and rebuilds the identity if the validation succeeds, otherwise rejects
            the identity.
            </summary>
            <param name="context">The context containing the <see cref="T:System.Security.Claims.ClaimsPrincipal"/>
            and <see cref="T:Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties"/> to validate.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous validation operation.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1">
            <summary>
            Provides an abstraction to store a user's authentication tokens.
            </summary>
            <typeparam name="TUser">The type encapsulating a user.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the token value for a particular user.
            </summary>
            <param name="user">The user.</param>
            <param name="loginProvider">The authentication provider for the token.</param>
            <param name="name">The name of the token.</param>
            <param name="value">The value of the token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes a token for a user.
            </summary>
            <param name="user">The user.</param>
            <param name="loginProvider">The authentication provider for the token.</param>
            <param name="name">The name of the token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the token value.
            </summary>
            <param name="user">The user.</param>
            <param name="loginProvider">The authentication provider for the token.</param>
            <param name="name">The name of the token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1">
            <summary>
            Provides an abstraction for a factory to create a <see cref="T:System.Security.Claims.ClaimsPrincipal"/> from a user.
            </summary>
            <typeparam name="TUser">The type encapsulating a user.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1.CreateAsync(`0)">
            <summary>
            Creates a <see cref="T:System.Security.Claims.ClaimsPrincipal"/> from an user asynchronously.
            </summary>
            <param name="user">The user to create a <see cref="T:System.Security.Claims.ClaimsPrincipal"/> from.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous creation operation, containing the created <see cref="T:System.Security.Claims.ClaimsPrincipal"/>.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.IUserClaimStore`1">
            <summary>
            Provides an abstraction for a store of claims for a user.
            </summary>
            <typeparam name="TUser">The type encapsulating a user.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Gets a list of <see cref="T:System.Security.Claims.Claim"/>s to be belonging to the specified <paramref name="user"/> as an asynchronous operation.
            </summary>
            <param name="user">The role whose claims to retrieve.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the result of the asynchronous query, a list of <see cref="T:System.Security.Claims.Claim"/>s.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserClaimStore`1.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)">
            <summary>
            Add claims to a user as an asynchronous operation.
            </summary>
            <param name="user">The user to add the claim to.</param>
            <param name="claims">The collection of <see cref="T:System.Security.Claims.Claim"/>s to add.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserClaimStore`1.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)">
            <summary>
            Replaces the given <paramref name="claim"/> on the specified <paramref name="user"/> with the <paramref name="newClaim"/>
            </summary>
            <param name="user">The user to replace the claim on.</param>
            <param name="claim">The claim to replace.</param>
            <param name="newClaim">The new claim to replace the existing <paramref name="claim"/> with.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserClaimStore`1.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)">
            <summary>
            Removes the specified <paramref name="claims"/> from the given <paramref name="user"/>.
            </summary>
            <param name="user">The user to remove the specified <paramref name="claims"/> from.</param>
            <param name="claims">A collection of <see cref="T:System.Security.Claims.Claim"/>s to remove.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)">
            <summary>
            Returns a list of users who contain the specified <see cref="T:System.Security.Claims.Claim"/>.
            </summary>
            <param name="claim">The claim to look for.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the result of the asynchronous query, a list of <typeparamref name="TUser"/> who
            contain the specified claim.
            </returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.IUserEmailStore`1">
            <summary>
            Provides an abstraction for the storage and management of user email addresses.
            </summary>
            <typeparam name="TUser">The type encapsulating a user.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the <paramref name="email"/> address for a <paramref name="user"/>.
            </summary>
            <param name="user">The user whose email should be set.</param>
            <param name="email">The email to set.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Gets the email address for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose email should be returned.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The task object containing the results of the asynchronous operation, the email address for the specified <paramref name="user"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Gets a flag indicating whether the email address for the specified <paramref name="user"/> has been verified, true if the email address is verified otherwise
            false.
            </summary>
            <param name="user">The user whose email confirmation status should be returned.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>
            The task object containing the results of the asynchronous operation, a flag indicating whether the email address for the specified <paramref name="user"/>
            has been confirmed or not.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sets the flag indicating whether the specified <paramref name="user"/>'s email address has been confirmed or not.
            </summary>
            <param name="user">The user whose email confirmation status should be set.</param>
            <param name="confirmed">A flag indicating if the email address has been confirmed, true if the address is confirmed otherwise false.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.FindByEmailAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the user, if any, associated with the specified, normalized email address.
            </summary>
            <param name="normalizedEmail">The normalized email address to return the user for.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>
            The task object containing the results of the asynchronous lookup operation, the user if any associated with the specified normalized email address.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Returns the normalized email for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose email address to retrieve.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>
            The task object containing the results of the asynchronous lookup operation, the normalized email address if any associated with the specified user.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the normalized email for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose email address to set.</param>
            <param name="normalizedEmail">The normalized email to set for the specified <paramref name="user"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.IUserLockoutStore`1">
            <summary>
            Provides an abstraction for a storing information which can be used to implement account lockout, 
            including access failures and lockout status
            </summary>
            <typeparam name="TUser">The type that represents a user.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Gets the last <see cref="T:System.DateTimeOffset"/> a user's last lockout expired, if any.
            Any time in the past should be indicates a user is not locked out.
            </summary>
            <param name="user">The user whose lockout date should be retrieved.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the result of the asynchronous query, a <see cref="T:System.DateTimeOffset"/> containing the last time
            a user's lockout expired, if any.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary>
            Locks out a user until the specified end date has passed. Setting a end date in the past immediately unlocks a user.
            </summary>
            <param name="user">The user whose lockout date should be set.</param>
            <param name="lockoutEnd">The <see cref="T:System.DateTimeOffset"/> after which the <paramref name="user"/>'s lockout should end.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Records that a failed access has occurred, incrementing the failed access count.
            </summary>
            <param name="user">The user whose cancellation count should be incremented.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the incremented failed access count.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Resets a user's failed access count.
            </summary>
            <param name="user">The user whose failed access count should be reset.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>This is typically called after the account is successfully accessed.</remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the current failed access count for the specified <paramref name="user"/>..
            </summary>
            <param name="user">The user whose failed access count should be retrieved.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the failed access count.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves a flag indicating whether user lockout can enabled for the specified user.
            </summary>
            <param name="user">The user whose ability to be locked out should be returned.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, true if a user can be locked out, otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Set the flag indicating if the specified <paramref name="user"/> can be locked out..
            </summary>
            <param name="user">The user whose ability to be locked out should be set.</param>
            <param name="enabled">A flag indicating if lock out can be enabled for the specified <paramref name="user"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.IUserLoginStore`1">
            <summary>
            Provides an abstraction for storing information that maps external login information provided
            by Microsoft Account, Facebook etc. to a user account.
            </summary>
            <typeparam name="TUser">The type that represents a user.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserLoginStore`1.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)">
            <summary>
            Adds an external <see cref="T:Microsoft.AspNetCore.Identity.UserLoginInfo"/> to the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user to add the login to.</param>
            <param name="login">The external <see cref="T:Microsoft.AspNetCore.Identity.UserLoginInfo"/> to add to the specified <paramref name="user"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserLoginStore`1.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Attempts to remove the provided login information from the specified <paramref name="user"/>.
            and returns a flag indicating whether the removal succeed or not.
            </summary>
            <param name="user">The user to remove the login information from.</param>
            <param name="loginProvider">The login provide whose information should be removed.</param>
            <param name="providerKey">The key given by the external login provider for the specified user.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserLoginStore`1.GetLoginsAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the associated logins for the specified <param ref="user"/>.
            </summary>
            <param name="user">The user whose associated logins to retrieve.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> for the asynchronous operation, containing a list of <see cref="T:Microsoft.AspNetCore.Identity.UserLoginInfo"/> for the specified <paramref name="user"/>, if any.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserLoginStore`1.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the user associated with the specified login provider and login provider key..
            </summary>
            <param name="loginProvider">The login provider who provided the <paramref name="providerKey"/>.</param>
            <param name="providerKey">The key provided by the <paramref name="loginProvider"/> to identify a user.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> for the asynchronous operation, containing the user, if any which matched the specified login provider and key.
            </returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.IUserPasswordStore`1">
            <summary>
            Provides an abstraction for a store containing users' password hashes..
            </summary>
            <typeparam name="TUser">The type encapsulating a user.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserPasswordStore`1.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the password hash for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose password hash to set.</param>
            <param name="passwordHash">The password hash to set.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserPasswordStore`1.GetPasswordHashAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Gets the password hash for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose password hash to retrieve.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, returning the password hash for the specified <paramref name="user"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserPasswordStore`1.HasPasswordAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Gets a flag indicating whether the specified <paramref name="user"/> has a password.
            </summary>
            <param name="user">The user to return a flag for, indicating whether they have a password or not.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, returning true if the specified <paramref name="user"/> has a password
            otherwise false.
            </returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1">
            <summary>
            Provides an abstraction for a store containing users' telephone numbers.
            </summary>
            <typeparam name="TUser">The type encapsulating a user.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the telephone number for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose telephone number should be set.</param>
            <param name="phoneNumber">The telephone number to set.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Gets the telephone number, if any, for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose telephone number should be retrieved.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the user's telephone number, if any.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Gets a flag indicating whether the specified <paramref name="user"/>'s telephone number has been confirmed.
            </summary>
            <param name="user">The user to return a flag for, indicating whether their telephone number is confirmed.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, returning true if the specified <paramref name="user"/> has a confirmed
            telephone number otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sets a flag indicating if the specified <paramref name="user"/>'s phone number has been confirmed..
            </summary>
            <param name="user">The user whose telephone number confirmation status should be set.</param>
            <param name="confirmed">A flag indicating whether the user's telephone number has been confirmed.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.IUserRoleStore`1">
            <summary>
            Provides an abstraction for a store which maps users to roles.
            </summary>
            <typeparam name="TUser">The type encapsulating a user.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserRoleStore`1.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Add a the specified <paramref name="user"/> to the named role.
            </summary>
            <param name="user">The user to add to the named role.</param>
            <param name="roleName">The name of the role to add the user to.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserRoleStore`1.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Add a the specified <paramref name="user"/> from the named role.
            </summary>
            <param name="user">The user to remove the named role from.</param>
            <param name="roleName">The name of the role to remove.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetRolesAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Gets a list of role names the specified <paramref name="user"/> belongs to.
            </summary>
            <param name="user">The user whose role names to retrieve.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing a list of role names.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserRoleStore`1.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="user"/> is a member of the give named role.
            </summary>
            <param name="user">The user whose role membership should be checked.</param>
            <param name="roleName">The name of the role to be checked.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing a flag indicating whether the specified <paramref name="user"/> is
            a member of the named role.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns a list of Users who are members of the named role.
            </summary>
            <param name="roleName">The name of the role whose membership should be returned.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing a list of users who are in the named role.
            </returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1">
            <summary>
            Provides an abstraction for a store which stores a user's security stamp.
            </summary>
            <typeparam name="TUser">The type encapsulating a user.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the provided security <paramref name="stamp"/> for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose security stamp should be set.</param>
            <param name="stamp">The security stamp to set.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.GetSecurityStampAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Get the security stamp for the specified <paramref name="user" />.
            </summary>
            <param name="user">The user whose security stamp should be set.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the security stamp for the specified <paramref name="user"/>.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.IUserStore`1">
            <summary>
            Provides an abstraction for a store which manages user accounts.
            </summary>
            <typeparam name="TUser">The type encapsulating a user.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserStore`1.GetUserIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Gets the user identifier for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose identifier should be retrieved.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the identifier for the specified <paramref name="user"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserStore`1.GetUserNameAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Gets the user name for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose name should be retrieved.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the name for the specified <paramref name="user"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserStore`1.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the given <paramref name="userName" /> for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose name should be set.</param>
            <param name="userName">The user name to set.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserStore`1.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Gets the normalized user name for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose normalized name should be retrieved.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the normalized user name for the specified <paramref name="user"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserStore`1.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the given normalized name for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose name should be set.</param>
            <param name="normalizedName">The normalized name to set.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserStore`1.CreateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Creates the specified <paramref name="user"/> in the user store.
            </summary>
            <param name="user">The user to create.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> of the creation operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserStore`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Updates the specified <paramref name="user"/> in the user store.
            </summary>
            <param name="user">The user to update.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> of the update operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserStore`1.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified <paramref name="user"/> from the user store.
            </summary>
            <param name="user">The user to delete.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> of the update operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds and returns a user, if any, who has the specified <paramref name="userId"/>.
            </summary>
            <param name="userId">The user ID to search for.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the user matching the specified <paramref name="userId"/> if it exists.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds and returns a user, if any, who has the specified normalized user name.
            </summary>
            <param name="normalizedUserName">The normalized user name to search for.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the user matching the specified <paramref name="normalizedUserName"/> if it exists.
            </returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1">
            <summary>
            Provides an abstraction to store a flag indicating whether a user has two factor authentication enabled.
            </summary>
            <typeparam name="TUser">The type encapsulating a user.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sets a flag indicating whether the specified <paramref name="user"/> has two factor authentication enabled or not,
            as an asynchronous operation.
            </summary>
            <param name="user">The user whose two factor authentication enabled status should be set.</param>
            <param name="enabled">A flag indicating whether the specified <paramref name="user"/> has two factor authentication enabled.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="user"/> has two factor authentication enabled or not,
            as an asynchronous operation.
            </summary>
            <param name="user">The user whose two factor authentication enabled status should be set.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing a flag indicating whether the specified 
            <paramref name="user"/> has two factor authentication enabled or not.
            </returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1">
            <summary>
            Provides an abstraction for two factor token generators.
            </summary>
            <typeparam name="TUser">The type encapsulating a user.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1.GenerateAsync(System.String,Microsoft.AspNetCore.Identity.UserManager{`0},`0)">
            <summary>
            Generates a token for the specified <paramref name="user"/> and <paramref name="purpose"/>.
            </summary>
            <param name="purpose">The purpose the token will be used for.</param>
            <param name="manager">The <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> that can be used to retrieve user properties.</param>
            <param name="user">The user a token should be generated for.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the token for the specified 
            <paramref name="user"/> and <paramref name="purpose"/>.
            </returns>
            <remarks>
            The <paramref name="purpose"/> parameter allows a token generator to be used for multiple types of token whilst
            insuring a token for one purpose cannot be used for another. For example if you specified a purpose of "Email" 
            and validated it with the same purpose a token with the purpose of TOTP would not pass the heck even if it was
            for the same user.
            
            Implementations of <see cref="T:Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1"/> should validate that purpose is not null or empty to
            help with token separation.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1.ValidateAsync(System.String,System.String,Microsoft.AspNetCore.Identity.UserManager{`0},`0)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="token"/> is valid for the given
            <paramref name="user"/> and <paramref name="purpose"/>.
            </summary>
            <param name="purpose">The purpose the token will be used for.</param>
            <param name="token">The token to validate.</param>
            <param name="manager">The <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> that can be used to retrieve user properties.</param>
            <param name="user">The user a token should be validated for.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the a flag indicating the result
            of validating the <paramref name="token"> for the specified </paramref><paramref name="user"/> and <paramref name="purpose"/>.
            The task will return true if the token is valid, otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1.CanGenerateTwoFactorTokenAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0)">
            <summary>
            Returns a flag indicating whether the token provider can generate a token suitable for two factor authentication token for
            the specified <paramref name="user"/>.
            </summary>
            <param name="manager">The <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> that can be used to retrieve user properties.</param>
            <param name="user">The user a token could be generated for.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the a flag indicating if a two
            factor token could be generated by this provider for the specified <paramref name="user"/>.
            The task will return true if a two factor authentication token could be generated, otherwise false.
            </returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.IUserValidator`1">
            <summary>
            Provides an abstraction for user validation.
            </summary>
            <typeparam name="TUser">The type encapsulating a user.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.IUserValidator`1.ValidateAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0)">
            <summary>
            Validates the specified <paramref name="user"/> as an asynchronous operation.
            </summary>
            <param name="manager">The <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> that can be used to retrieve user properties.</param>
            <param name="user">The user to validate.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> of the validation operation.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.LockoutOptions">
            <summary>
            Options for configuring user lockout.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.LockoutOptions.AllowedForNewUsers">
            <value>
            True if a newly created user can be locked out, otherwise false.
            </value>
            <remarks>
            Defaults to true.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.LockoutOptions.MaxFailedAccessAttempts">
            <summary>
            Gets or sets the number of failed access attempts allowed before a user is locked out,
            assuming lock out is enabled.
            </summary>
            <value>
            The number of failed access attempts allowed before a user is locked out, if lockout is enabled.
            </value>
            <remarks>Defaults to 5 failed attempts before an account is locked out.</remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.LockoutOptions.DefaultLockoutTimeSpan">
            <summary>
            Gets or sets the <see cref="T:System.TimeSpan"/> a user is locked out for when a lockout occurs.
            </summary>
            <value>The <see cref="T:System.TimeSpan"/> a user is locked out for when a lockout occurs.</value>
            <remarks>Defaults to 5 minutes.</remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.PasswordHasher`1">
            <summary>
            Implements the standard Identity password hashing.
            </summary>
            <typeparam name="TUser">The type used to represent a user.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.PasswordHasher`1.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Identity.PasswordHasherOptions})">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNetCore.Identity.PasswordHasher`1"/>.
            </summary>
            <param name="optionsAccessor">The options for this instance.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.PasswordHasher`1.HashPassword(`0,System.String)">
            <summary>
            Returns a hashed representation of the supplied <paramref name="password"/> for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose password is to be hashed.</param>
            <param name="password">The password to hash.</param>
            <returns>A hashed representation of the supplied <paramref name="password"/> for the specified <paramref name="user"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.PasswordHasher`1.VerifyHashedPassword(`0,System.String,System.String)">
            <summary>
            Returns a <see cref="T:Microsoft.AspNetCore.Identity.PasswordVerificationResult"/> indicating the result of a password hash comparison.
            </summary>
            <param name="user">The user whose password should be verified.</param>
            <param name="hashedPassword">The hash value for a user's stored password.</param>
            <param name="providedPassword">The password supplied for comparison.</param>
            <returns>A <see cref="T:Microsoft.AspNetCore.Identity.PasswordVerificationResult"/> indicating the result of a password hash comparison.</returns>
            <remarks>Implementations of this method should be time consistent.</remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.PasswordHasherCompatibilityMode">
            <summary>
            Specifies the format used for hashing passwords.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Identity.PasswordHasherCompatibilityMode.IdentityV2">
            <summary>
            Indicates hashing passwords in a way that is compatible with ASP.NET Identity versions 1 and 2.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Identity.PasswordHasherCompatibilityMode.IdentityV3">
            <summary>
            Indicates hashing passwords in a way that is compatible with ASP.NET Identity version 3.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.PasswordHasherOptions">
            <summary>
            Specifies options for password hashing.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.PasswordHasherOptions.CompatibilityMode">
            <summary>
            Gets or sets the compatibility mode used when hashing passwords.
            </summary>
            <value>
            The compatibility mode used when hashing passwords.
            </value>
            <remarks>
            The default compatibility mode is 'ASP.NET Identity version 3'.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.PasswordHasherOptions.IterationCount">
            <summary>
            Gets or sets the number of iterations used when hashing passwords using PBKDF2.
            </summary>
            <value>
            The number of iterations used when hashing passwords using PBKDF2.
            </value>
            <remarks>
            This value is only used when the compatibility mode is set to 'V3'.
            The value must be a positive integer. The default value is 10,000.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.PasswordOptions">
            <summary>
            Specifies options for password requirements.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.PasswordOptions.RequiredLength">
            <summary>
            Gets or sets the minimum length a password must be.
            </summary>
            <remarks>
            This defaults to 6.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.PasswordOptions.RequireNonAlphanumeric">
            <summary>
            Gets or sets a flag indicating if passwords must contain a non-alphanumeric character.
            </summary>
            <value>True if passwords must contain a non-alphanumeric character, otherwise false.</value>
            <remarks>
            This defaults to true.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.PasswordOptions.RequireLowercase">
            <summary>
            Gets or sets a flag indicating if passwords must contain a lower case ASCII character.
            </summary>
            <value>True if passwords must contain a lower case ASCII character.</value>
            <remarks>
            This defaults to true.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.PasswordOptions.RequireUppercase">
            <summary>
            Gets or sets a flag indicating if passwords must contain a upper case ASCII character.
            </summary>
            <value>True if passwords must contain a upper case ASCII character.</value>
            <remarks>
            This defaults to true.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.PasswordOptions.RequireDigit">
            <summary>
            Gets or sets a flag indicating if passwords must contain a digit.
            </summary>
            <value>True if passwords must contain a digit.</value>
            <remarks>
            This defaults to true.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.PasswordValidator`1">
            <summary>
            Provides the default password policy for Identity.
            </summary>
            <typeparam name="TUser">The type that represents a user.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.PasswordValidator`1.#ctor(Microsoft.AspNetCore.Identity.IdentityErrorDescriber)">
            <summary>
            Constructions a new instance of <see cref="T:Microsoft.AspNetCore.Identity.PasswordValidator`1"/>.
            </summary>
            <param name="errors">The <see cref="T:Microsoft.AspNetCore.Identity.IdentityErrorDescriber"/> to retrieve error text from.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.PasswordValidator`1.Describer">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Identity.IdentityErrorDescriber"/> used to supply error text.
            </summary>
            <value>The <see cref="T:Microsoft.AspNetCore.Identity.IdentityErrorDescriber"/> used to supply error text.</value>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.PasswordValidator`1.ValidateAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0,System.String)">
            <summary>
            Validates a password as an asynchronous operation.
            </summary>
            <param name="manager">The <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> to retrieve the <paramref name="user"/> properties from.</param>
            <param name="user">The user whose password should be validated.</param>
            <param name="password">The password supplied for validation</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.PasswordValidator`1.IsDigit(System.Char)">
            <summary>
            Returns a flag indicting whether the supplied character is a digit.
            </summary>
            <param name="c">The character to check if it is a digit.</param>
            <returns>True if the character is a digit, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.PasswordValidator`1.IsLower(System.Char)">
            <summary>
            Returns a flag indicting whether the supplied character is a lower case ASCII letter.
            </summary>
            <param name="c">The character to check if it is a lower case ASCII letter.</param>
            <returns>True if the character is a lower case ASCII letter, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.PasswordValidator`1.IsUpper(System.Char)">
            <summary>
            Returns a flag indicting whether the supplied character is an upper case ASCII letter.
            </summary>
            <param name="c">The character to check if it is an upper case ASCII letter.</param>
            <returns>True if the character is an upper case ASCII letter, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.PasswordValidator`1.IsLetterOrDigit(System.Char)">
            <summary>
            Returns a flag indicting whether the supplied character is an ASCII letter or digit.
            </summary>
            <param name="c">The character to check if it is an ASCII letter or digit.</param>
            <returns>True if the character is an ASCII letter or digit, otherwise false.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.PasswordVerificationResult">
            <summary>
            Specifies the results for password verification.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Identity.PasswordVerificationResult.Failed">
            <summary>
            Indicates password verification failed.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Identity.PasswordVerificationResult.Success">
            <summary>
            Indicates password verification was successful.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Identity.PasswordVerificationResult.SuccessRehashNeeded">
            <summary>
            Indicates password verification was successful however the password was encoded using a deprecated algorithm
            and should be rehashed and updated.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.PhoneNumberTokenProvider`1">
            <summary>
            Represents a token provider that generates tokens from a user's security stamp and
            sends them to the user via their phone number.
            </summary>
            <typeparam name="TUser">The type encapsulating a user.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.PhoneNumberTokenProvider`1.CanGenerateTwoFactorTokenAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0)">
            <summary>
            Returns a flag indicating whether the token provider can generate a token suitable for two factor authentication token for
            the specified <paramref name="user"/>.
            </summary>
            <param name="manager">The <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> that can be used to retrieve user properties.</param>
            <param name="user">The user a token could be generated for.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the a flag indicating if a two
            factor token could be generated by this provider for the specified <paramref name="user"/>.
            The task will return true if a two factor authentication token could be generated as the user has
            a telephone number, otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.PhoneNumberTokenProvider`1.GetUserModifierAsync(System.String,Microsoft.AspNetCore.Identity.UserManager{`0},`0)">
            <summary>
            Returns a constant, provider and user unique modifier used for entropy in generated tokens from user information.
            </summary>
            <param name="purpose">The purpose the token will be generated for.</param>
            <param name="manager">The <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> that can be used to retrieve user properties.</param>
            <param name="user">The user a token should be generated for.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing a constant modifier for the specified 
            <paramref name="user"/> and <paramref name="purpose"/>.
            </returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.RoleManager`1">
            <summary>
            Provides the APIs for managing roles in a persistence store.
            </summary>
            <typeparam name="TRole">The type encapsulating a role.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.RoleManager`1.#ctor(Microsoft.AspNetCore.Identity.IRoleStore{`0},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IRoleValidator{`0}},Microsoft.AspNetCore.Identity.ILookupNormalizer,Microsoft.AspNetCore.Identity.IdentityErrorDescriber,Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.RoleManager{`0}},Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            Constructs a new instance of <see cref="T:Microsoft.AspNetCore.Identity.RoleManager`1"/>.
            </summary>
            <param name="store">The persistence store the manager will operate over.</param>
            <param name="roleValidators">A collection of validators for roles.</param>
            <param name="keyNormalizer">The normalizer to use when normalizing role names to keys.</param>
            <param name="errors">The <see cref="T:Microsoft.AspNetCore.Identity.IdentityErrorDescriber"/> used to provider error messages.</param>
            <param name="logger">The logger used to log messages, warnings and errors.</param>
            <param name="contextAccessor">The accessor used to access the <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/>.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.RoleManager`1.Store">
            <summary>
            Gets the persistence store this instance operates over.
            </summary>
            <value>The persistence store this instance operates over.</value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.RoleManager`1.Logger">
            <summary>
            Gets the <see cref="T:Microsoft.Extensions.Logging.ILogger"/> used to log messages from the manager.
            </summary>
            <value>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> used to log messages from the manager.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.RoleManager`1.RoleValidators">
            <summary>
            Gets a list of validators for roles to call before persistence.
            </summary>
            <value>A list of validators for roles to call before persistence.</value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.RoleManager`1.ErrorDescriber">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Identity.IdentityErrorDescriber"/> used to provider error messages.
            </summary>
            <value>
            The <see cref="T:Microsoft.AspNetCore.Identity.IdentityErrorDescriber"/> used to provider error messages.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.RoleManager`1.KeyNormalizer">
            <summary>
            Gets the normalizer to use when normalizing role names to keys.
            </summary>
            <value>
            The normalizer to use when normalizing role names to keys.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.RoleManager`1.Roles">
            <summary>
            Gets an IQueryable collection of Roles if the persistence store is an <see cref="T:Microsoft.AspNetCore.Identity.IQueryableRoleStore`1"/>,
            otherwise throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <value>An IQueryable collection of Roles if the persistence store is an <see cref="T:Microsoft.AspNetCore.Identity.IQueryableRoleStore`1"/>.</value>
            <exception cref="T:System.NotSupportedException">Thrown if the persistence store is not an <see cref="T:Microsoft.AspNetCore.Identity.IQueryableRoleStore`1"/>.</exception>
            <remarks>
            Callers to this property should use <see cref="P:Microsoft.AspNetCore.Identity.RoleManager`1.SupportsQueryableRoles"/> to ensure the backing role store supports 
            returning an IQueryable list of roles.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.RoleManager`1.SupportsQueryableRoles">
            <summary>
            Gets a flag indicating whether the underlying persistence store supports returning an <see cref="T:System.Linq.IQueryable"/> collection of roles.
            </summary>
            <value>
            true if the underlying persistence store supports returning an <see cref="T:System.Linq.IQueryable"/> collection of roles, otherwise false.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.RoleManager`1.SupportsRoleClaims">
            <summary>
            Gets a flag indicating whether the underlying persistence store supports <see cref="T:System.Security.Claims.Claim"/>s for roles.
            </summary>
            <value>
            true if the underlying persistence store supports <see cref="T:System.Security.Claims.Claim"/>s for roles, otherwise false.
            </value>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.RoleManager`1.CreateAsync(`0)">
            <summary>
            Creates the specified <paramref name="role"/> in the persistence store.
            </summary>
            <param name="role">The role to create.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.RoleManager`1.UpdateNormalizedRoleNameAsync(`0)">
            <summary>
            Updates the normalized name for the specified <paramref name="role"/>.
            </summary>
            <param name="role">The role whose normalized name needs to be updated.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.RoleManager`1.UpdateAsync(`0)">
            <summary>
            Updates the specified <paramref name="role"/>.
            </summary>
            <param name="role">The role to updated.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> for the update.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.RoleManager`1.DeleteAsync(`0)">
            <summary>
            Deletes the specified <paramref name="role"/>.
            </summary>
            <param name="role">The role to delete.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> for the delete.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.RoleManager`1.RoleExistsAsync(System.String)">
            <summary>
            Gets a flag indicating whether the specified <paramref name="roleName"/> exists.
            </summary>
            <param name="roleName">The role name whose existence should be checked.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing true if the role name exists, otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.RoleManager`1.NormalizeKey(System.String)">
            <summary>
            Gets a normalized representation of the specified <paramref name="key"/>.
            </summary>
            <param name="key">The value to normalize.</param>
            <returns>A normalized representation of the specified <paramref name="key"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.RoleManager`1.FindByIdAsync(System.String)">
            <summary>
            Finds the role associated with the specified <paramref name="roleId"/> if any.
            </summary>
            <param name="roleId">The role ID whose role should be returned.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the role 
            associated with the specified <paramref name="roleId"/>
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.RoleManager`1.GetRoleNameAsync(`0)">
            <summary>
            Gets the name of the specified <paramref name="role"/>.
            </summary>
            <param name="role">The role whose name should be retrieved.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the name of the 
            specified <paramref name="role"/>.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.RoleManager`1.SetRoleNameAsync(`0,System.String)">
            <summary>
            Sets the name of the specified <paramref name="role"/>.
            </summary>
            <param name="role">The role whose name should be set.</param>
            <param name="name">The name to set.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.RoleManager`1.GetRoleIdAsync(`0)">
            <summary>
            Gets the ID of the specified <paramref name="role"/>.
            </summary>
            <param name="role">The role whose ID should be retrieved.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the ID of the 
            specified <paramref name="role"/>.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.RoleManager`1.FindByNameAsync(System.String)">
            <summary>
            Finds the role associated with the specified <paramref name="roleName"/> if any.
            </summary>
            <param name="roleName">The name of the role to be returned.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the role 
            associated with the specified <paramref name="roleName"/>
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.RoleManager`1.AddClaimAsync(`0,System.Security.Claims.Claim)">
            <summary>
            Adds a claim to a role.
            </summary>
            <param name="role">The role to add the claim to.</param>
            <param name="claim">The claim to add.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.RoleManager`1.RemoveClaimAsync(`0,System.Security.Claims.Claim)">
            <summary>
            Removes a claim from a role.
            </summary>
            <param name="role">The role to remove the claim from.</param>
            <param name="claim">The claim to remove.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.RoleManager`1.GetClaimsAsync(`0)">
            <summary>
            Gets a list of claims associated with the specified <paramref name="role"/>.
            </summary>
            <param name="role">The role whose claims should be returned.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the list of <see cref="T:System.Security.Claims.Claim"/>s
            associated with the specified <paramref name="role"/>.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.RoleManager`1.Dispose">
            <summary>
            Releases all resources used by the role manager.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.RoleManager`1.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the role manager and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.RoleValidator`1">
            <summary>
            Provides the default validation of roles.
            </summary>
            <typeparam name="TRole">The type encapsulating a role.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.RoleValidator`1.#ctor(Microsoft.AspNetCore.Identity.IdentityErrorDescriber)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNetCore.Identity.RoleValidator`1"/>/
            </summary>
            <param name="errors">The <see cref="T:Microsoft.AspNetCore.Identity.IdentityErrorDescriber"/> used to provider error messages.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.RoleValidator`1.ValidateAsync(Microsoft.AspNetCore.Identity.RoleManager{`0},`0)">
            <summary>
            Validates a role as an asynchronous operation.
            </summary>
            <param name="manager">The <see cref="T:Microsoft.AspNetCore.Identity.RoleManager`1"/> managing the role store.</param>
            <param name="role">The role to validate.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> of the asynchronous validation.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.SecurityStampValidator`1">
            <summary>
            Provides default implementation of validation functions for security stamps.
            </summary>
            <typeparam name="TUser">The type encapsulating a user.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.SecurityStampValidator`1.ValidateAsync(Microsoft.AspNetCore.Authentication.Cookies.CookieValidatePrincipalContext)">
            <summary>
            Validates a security stamp of an identity as an asynchronous operation, and rebuilds the identity if the validation succeeds, otherwise rejects
            the identity.
            </summary>
            <param name="context">The context containing the <see cref="T:System.Security.Claims.ClaimsPrincipal"/>
            and <see cref="T:Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties"/> to validate.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous validation operation.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.SecurityStampValidator">
            <summary>
            Static helper class used to configure a CookieAuthenticationNotifications to validate a cookie against a user's security
            stamp.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.SecurityStampValidator.ValidatePrincipalAsync(Microsoft.AspNetCore.Authentication.Cookies.CookieValidatePrincipalContext)">
            <summary>
            Validates a principal against a user's stored security stamp.
            the identity.
            </summary>
            <param name="context">The context containing the <see cref="T:System.Security.Claims.ClaimsPrincipal"/>
            and <see cref="T:Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties"/> to validate.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous validation operation.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.SignInManager`1">
            <summary>
            Provides the APIs for user sign in.
            </summary>
            <typeparam name="TUser">The type encapsulating a user.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.SignInManager`1.#ctor(Microsoft.AspNetCore.Identity.UserManager{`0},Microsoft.AspNetCore.Http.IHttpContextAccessor,Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory{`0},Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.IdentityOptions},Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.SignInManager{`0}})">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNetCore.Identity.SignInManager`1"/>.
            </summary>
            <param name="userManager">An instance of <see cref="P:Microsoft.AspNetCore.Identity.SignInManager`1.UserManager"/> used to retrieve users from and persist users.</param>
            <param name="contextAccessor">The accessor used to access the <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/>.</param>
            <param name="claimsFactory">The factory to use to create claims principals for a user.</param>
            <param name="optionsAccessor">The accessor used to access the <see cref="T:Microsoft.AspNetCore.Builder.IdentityOptions"/>.</param>
            <param name="logger">The logger used to log messages, warnings and errors.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.SignInManager`1.Logger">
            <summary>
            Gets the <see cref="T:Microsoft.Extensions.Logging.ILogger"/> used to log messages from the manager.
            </summary>
            <value>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> used to log messages from the manager.
            </value>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.SignInManager`1.CreateUserPrincipalAsync(`0)">
            <summary>
            Creates a <see cref="T:System.Security.Claims.ClaimsPrincipal"/> for the specified <paramref name="user"/>, as an asynchronous operation.
            </summary>
            <param name="user">The user to create a <see cref="T:System.Security.Claims.ClaimsPrincipal"/> for.</param>
            <returns>The task object representing the asynchronous operation, containing the ClaimsPrincipal for the specified user.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.SignInManager`1.IsSignedIn(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Returns true if the principal has an identity with the application cookie identity
            </summary>
            <param name="principal">The <see cref="T:System.Security.Claims.ClaimsPrincipal"/> instance.</param>
            <returns>True if the user is logged in with identity.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.SignInManager`1.CanSignInAsync(`0)">
            <summary>
            Returns a flag indicating whether the specified user can sign in.
            </summary>
            <param name="user">The user whose sign-in status should be returned.</param>
            <returns>
            The task object representing the asynchronous operation, containing a flag that is true
            if the specified user can sign-in, otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.SignInManager`1.RefreshSignInAsync(`0)">
            <summary>
            Regenerates the user's application cookie, whilst preserving the existing
            AuthenticationProperties like rememberMe, as an asynchronous operation.
            </summary>
            <param name="user">The user whose sign-in cookie should be refreshed.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.SignInManager`1.SignInAsync(`0,System.Boolean,System.String)">
            <summary>
            Signs in the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user to sign-in.</param>
            <param name="isPersistent">Flag indicating whether the sign-in cookie should persist after the browser is closed.</param>
            <param name="authenticationMethod">Name of the method used to authenticate the user.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.SignInManager`1.SignInAsync(`0,Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties,System.String)">
            <summary>
            Signs in the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user to sign-in.</param>
            <param name="authenticationProperties">Properties applied to the login and authentication cookie.</param>
            <param name="authenticationMethod">Name of the method used to authenticate the user.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.SignInManager`1.SignOutAsync">
            <summary>
            Signs the current user out of the application.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.SignInManager`1.ValidateSecurityStampAsync(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Validates the security stamp for the specified <paramref name="principal"/> against
            the persisted stamp for the current user, as an asynchronous operation.
            </summary>
            <param name="principal">The principal whose stamp should be validated.</param>
            <returns>The task object representing the asynchronous operation. The task will contain the <typeparamref name="TUser"/>
            if the stamp matches the persisted value, otherwise it will return false.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.SignInManager`1.PasswordSignInAsync(`0,System.String,System.Boolean,System.Boolean)">
            <summary>
            Attempts to sign in the specified <paramref name="user"/> and <paramref name="password"/> combination
            as an asynchronous operation.
            </summary>
            <param name="user">The user to sign in.</param>
            <param name="password">The password to attempt to sign in with.</param>
            <param name="isPersistent">Flag indicating whether the sign-in cookie should persist after the browser is closed.</param>
            <param name="lockoutOnFailure">Flag indicating if the user account should be locked if the sign in fails.</param>
            <returns>The task object representing the asynchronous operation containing the <see name="SignInResult"/>
            for the sign-in attempt.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.SignInManager`1.PasswordSignInAsync(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Attempts to sign in the specified <paramref name="userName"/> and <paramref name="password"/> combination
            as an asynchronous operation.
            </summary>
            <param name="userName">The user name to sign in.</param>
            <param name="password">The password to attempt to sign in with.</param>
            <param name="isPersistent">Flag indicating whether the sign-in cookie should persist after the browser is closed.</param>
            <param name="lockoutOnFailure">Flag indicating if the user account should be locked if the sign in fails.</param>
            <returns>The task object representing the asynchronous operation containing the <see name="SignInResult"/>
            for the sign-in attempt.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.SignInManager`1.IsTwoFactorClientRememberedAsync(`0)">
            <summary>
            Returns a flag indicating if the current client browser has been remembered by two factor authentication
            for the user attempting to login, as an asynchronous operation.
            </summary>
            <param name="user">The user attempting to login.</param>
            <returns>
            The task object representing the asynchronous operation containing true if the browser has been remembered
            for the current user.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.SignInManager`1.RememberTwoFactorClientAsync(`0)">
            <summary>
            Sets a flag on the browser to indicate the user has selected "Remember this browser" for two factor authentication purposes,
            as an asynchronous operation.
            </summary>
            <param name="user">The user who choose "remember this browser".</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.SignInManager`1.ForgetTwoFactorClientAsync">
            <summary>
            Clears the "Remember this browser flag" from the current browser, as an asynchronous operation.
            </summary>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.SignInManager`1.TwoFactorSignInAsync(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Validates the two faction sign in code and creates and signs in the user, as an asynchronous operation.
            </summary>
            <param name="provider">The two factor authentication provider to validate the code against.</param>
            <param name="code">The two factor authentication code to validate.</param>
            <param name="isPersistent">Flag indicating whether the sign-in cookie should persist after the browser is closed.</param>
            <param name="rememberClient">Flag indicating whether the current browser should be remember, suppressing all further 
            two factor authentication prompts.</param>
            <returns>The task object representing the asynchronous operation containing the <see name="SignInResult"/>
            for the sign-in attempt.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.SignInManager`1.GetTwoFactorAuthenticationUserAsync">
            <summary>
            Gets the <typeparamref name="TUser"/> for the current two factor authentication login, as an asynchronous operation.
            </summary>
            <returns>The task object representing the asynchronous operation containing the <typeparamref name="TUser"/>
            for the sign-in attempt.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.SignInManager`1.ExternalLoginSignInAsync(System.String,System.String,System.Boolean)">
            <summary>
            Signs in a user via a previously registered third party login, as an asynchronous operation.
            </summary>
            <param name="loginProvider">The login provider to use.</param>
            <param name="providerKey">The unique provider identifier for the user.</param>
            <param name="isPersistent">Flag indicating whether the sign-in cookie should persist after the browser is closed.</param>
            <returns>The task object representing the asynchronous operation containing the <see name="SignInResult"/>
            for the sign-in attempt.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.SignInManager`1.GetExternalAuthenticationSchemes">
            <summary>
            Gets a collection of <see cref="T:Microsoft.AspNetCore.Http.Authentication.AuthenticationDescription"/>s for the known external login providers.
            </summary>
            <returns>A collection of <see cref="T:Microsoft.AspNetCore.Http.Authentication.AuthenticationDescription"/>s for the known external login providers.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.SignInManager`1.GetExternalLoginInfoAsync(System.String)">
            <summary>
            Gets the external login information for the current login, as an asynchronous operation.
            </summary>
            <param name="expectedXsrf">Flag indication whether a Cross Site Request Forgery token was expected in the current request.</param>
            <returns>The task object representing the asynchronous operation containing the <see name="ExternalLoginInfo"/>
            for the sign-in attempt.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.SignInManager`1.UpdateExternalAuthenticationTokensAsync(Microsoft.AspNetCore.Identity.ExternalLoginInfo)">
            <summary>
            Stores any authentication tokens found in the external authentication cookie into the associated user.
            </summary>
            <param name="externalLogin">The information from the external login provider.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> of the operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.SignInManager`1.ConfigureExternalAuthenticationProperties(System.String,System.String,System.String)">
            <summary>
            Configures the redirect URL and user identifier for the specified external login <paramref name="provider"/>.
            </summary>
            <param name="provider">The provider to configure.</param>
            <param name="redirectUrl">The external login URL users should be redirected to during the login glow.</param>
            <param name="userId">The current user's identifier, which will be used to provide CSRF protection.</param>
            <returns>A configured <see cref="T:Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.SignInManager`1.StoreTwoFactorInfo(System.String,System.String)">
            <summary>
            Creates a claims principal for the specified 2fa information.
            </summary>
            <param name="userId">The user whose is logging in via 2fa.</param>
            <param name="loginProvider">The 2fa provider.</param>
            <returns>A <see cref="T:System.Security.Claims.ClaimsPrincipal"/> containing the user 2fa information.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.SignInOptions">
            <summary>
            Options for configuring sign in..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.SignInOptions.RequireConfirmedEmail">
            <summary>
            Gets or sets a flag indicating whether a confirmed email address is required to sign in.
            </summary>
            <value>True if a user must have a confirmed email address before they can sign in, otherwise false.</value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.SignInOptions.RequireConfirmedPhoneNumber">
            <summary>
            Gets or sets a flag indicating whether a confirmed telephone number is required to sign in.
            </summary>
            <value>True if a user must have a confirmed telephone number before they can sign in, otherwise false.</value>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.SignInResult">
            <summary>
            Represents the result of a sign-in operation.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.SignInResult.Succeeded">
            <summary>
            Returns a flag indication whether the sign-in was successful.
            </summary>
            <value>True if the sign-in was successful, otherwise false.</value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.SignInResult.IsLockedOut">
            <summary>
            Returns a flag indication whether the user attempting to sign-in is locked out.
            </summary>
            <value>True if the user attempting to sign-in is locked out, otherwise false.</value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.SignInResult.IsNotAllowed">
            <summary>
            Returns a flag indication whether the user attempting to sign-in is not allowed to sign-in.
            </summary>
            <value>True if the user attempting to sign-in is not allowed to sign-in, otherwise false.</value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.SignInResult.RequiresTwoFactor">
            <summary>
            Returns a flag indication whether the user attempting to sign-in requires two factor authentication.
            </summary>
            <value>True if the user attempting to sign-in requires two factor authentication, otherwise false.</value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.SignInResult.Success">
            <summary>
            Returns a <see cref="T:Microsoft.AspNetCore.Identity.SignInResult"/> that represents a successful sign-in.
            </summary>
            <returns>A <see cref="T:Microsoft.AspNetCore.Identity.SignInResult"/> that represents a successful sign-in.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.SignInResult.Failed">
            <summary>
            Returns a <see cref="T:Microsoft.AspNetCore.Identity.SignInResult"/> that represents a failed sign-in.
            </summary>
            <returns>A <see cref="T:Microsoft.AspNetCore.Identity.SignInResult"/> that represents a failed sign-in.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.SignInResult.LockedOut">
            <summary>
            Returns a <see cref="T:Microsoft.AspNetCore.Identity.SignInResult"/> that represents a sign-in attempt that failed because 
            the user was logged out.
            </summary>
            <returns>A <see cref="T:Microsoft.AspNetCore.Identity.SignInResult"/> that represents sign-in attempt that failed due to the
            user being locked out.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.SignInResult.NotAllowed">
            <summary>
            Returns a <see cref="T:Microsoft.AspNetCore.Identity.SignInResult"/> that represents a sign-in attempt that failed because 
            the user is not allowed to sign-in.
            </summary>
            <returns>A <see cref="T:Microsoft.AspNetCore.Identity.SignInResult"/> that represents sign-in attempt that failed due to the
            user is not allowed to sign-in.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.SignInResult.TwoFactorRequired">
            <summary>
            Returns a <see cref="T:Microsoft.AspNetCore.Identity.SignInResult"/> that represents a sign-in attempt that needs two-factor 
            authentication.
            </summary>
            <returns>A <see cref="T:Microsoft.AspNetCore.Identity.SignInResult"/> that represents sign-in attempt that needs two-factor
            authentication.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.SignInResult.ToString">
            <summary>
            Converts the value of the current <see cref="T:Microsoft.AspNetCore.Identity.SignInResult"/> object to its equivalent string representation.
            </summary>
            <returns>A string representation of value of the current <see cref="T:Microsoft.AspNetCore.Identity.SignInResult"/> object.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.TokenOptions.ProviderMap">
            <summary>
            Will be used to construct UserTokenProviders with the key used as the providerName.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.TokenOptions.EmailConfirmationTokenProvider">
            <summary>
            Gets or sets the <see cref="P:Microsoft.AspNetCore.Identity.TokenOptions.EmailConfirmationTokenProvider"/> used to generate tokens used in account confirmation emails.
            </summary>
            <value>
            The <see cref="P:Microsoft.AspNetCore.Identity.TokenOptions.EmailConfirmationTokenProvider"/> used to generate tokens used in account confirmation emails.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.TokenOptions.PasswordResetTokenProvider">
            <summary>
            Gets or sets the <see cref="P:Microsoft.AspNetCore.Identity.TokenOptions.PasswordResetTokenProvider"/> used to generate tokens used in password reset emails.
            </summary>
            <value>
            The <see cref="P:Microsoft.AspNetCore.Identity.TokenOptions.PasswordResetTokenProvider"/> used to generate tokens used in password reset emails.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.TokenOptions.ChangeEmailTokenProvider">
            <summary>
            Gets or sets the <see cref="P:Microsoft.AspNetCore.Identity.TokenOptions.ChangeEmailTokenProvider"/> used to generate tokens used in email change confirmation emails.
            </summary>
            <value>
            The <see cref="P:Microsoft.AspNetCore.Identity.TokenOptions.ChangeEmailTokenProvider"/> used to generate tokens used in email change confirmation emails.
            </value>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.TotpSecurityStampBasedTokenProvider`1">
            <summary>
            Represents a token provider that generates time based codes using the user's security stamp.
            </summary>
            <typeparam name="TUser">The type encapsulating a user.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.TotpSecurityStampBasedTokenProvider`1.GenerateAsync(System.String,Microsoft.AspNetCore.Identity.UserManager{`0},`0)">
            <summary>
            Generates a token for the specified <paramref name="user"/> and <paramref name="purpose"/>.
            </summary>
            <param name="purpose">The purpose the token will be used for.</param>
            <param name="manager">The <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> that can be used to retrieve user properties.</param>
            <param name="user">The user a token should be generated for.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the token for the specified 
            <paramref name="user"/> and <paramref name="purpose"/>.
            </returns>
            <remarks>
            The <paramref name="purpose"/> parameter allows a token generator to be used for multiple types of token whilst
            insuring a token for one purpose cannot be used for another. For example if you specified a purpose of "Email" 
            and validated it with the same purpose a token with the purpose of TOTP would not pass the check even if it was
            for the same user.
            
            Implementations of <see cref="T:Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1"/> should validate that purpose is not null or empty to
            help with token separation.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.TotpSecurityStampBasedTokenProvider`1.ValidateAsync(System.String,System.String,Microsoft.AspNetCore.Identity.UserManager{`0},`0)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="token"/> is valid for the given
            <paramref name="user"/> and <paramref name="purpose"/>.
            </summary>
            <param name="purpose">The purpose the token will be used for.</param>
            <param name="token">The token to validate.</param>
            <param name="manager">The <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> that can be used to retrieve user properties.</param>
            <param name="user">The user a token should be validated for.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the a flag indicating the result
            of validating the <paramref name="token"> for the specified </paramref><paramref name="user"/> and <paramref name="purpose"/>.
            The task will return true if the token is valid, otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.TotpSecurityStampBasedTokenProvider`1.GetUserModifierAsync(System.String,Microsoft.AspNetCore.Identity.UserManager{`0},`0)">
            <summary>
            Returns a constant, provider and user unique modifier used for entropy in generated tokens from user information.
            </summary>
            <param name="purpose">The purpose the token will be generated for.</param>
            <param name="manager">The <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> that can be used to retrieve user properties.</param>
            <param name="user">The user a token should be generated for.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing a constant modifier for the specified 
            <paramref name="user"/> and <paramref name="purpose"/>.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.TotpSecurityStampBasedTokenProvider`1.CanGenerateTwoFactorTokenAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0)">
            <summary>
            Returns a flag indicating whether the token provider can generate a token suitable for two factor authentication token for
            the specified <paramref name="user"/>.
            </summary>
            <param name="manager">The <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> that can be used to retrieve user properties.</param>
            <param name="user">The user a token could be generated for.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the a flag indicating if a two
            factor token could be generated by this provider for the specified <paramref name="user"/>.
            The task will return true if a two factor authentication token could be generated, otherwise false.
            </returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.UpperInvariantLookupNormalizer">
            <summary>
            Implements <see cref="T:Microsoft.AspNetCore.Identity.ILookupNormalizer"/> by converting keys to their upper cased invariant culture representation.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UpperInvariantLookupNormalizer.Normalize(System.String)">
            <summary>
            Returns a normalized representation of the specified <paramref name="key"/>
            by converting keys to their upper cased invariant culture representation.
            </summary>
            <param name="key">The key to normalize.</param>
            <returns>A normalized representation of the specified <paramref name="key"/>.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2">
            <summary>
            Provides methods to create a claims principal for a given user.
            </summary>
            <typeparam name="TUser">The type used to represent a user.</typeparam>
            <typeparam name="TRole">The type used to represent a role.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2.#ctor(Microsoft.AspNetCore.Identity.UserManager{`0},Microsoft.AspNetCore.Identity.RoleManager{`1},Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.IdentityOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2"/> class.
            </summary>
            <param name="userManager">The <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> to retrieve user information from.</param>
            <param name="roleManager">The <see cref="T:Microsoft.AspNetCore.Identity.RoleManager`1"/> to retrieve a user's roles from.</param>
            <param name="optionsAccessor">The configured <see cref="T:Microsoft.AspNetCore.Builder.IdentityOptions"/>.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2.UserManager">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> for this factory.
            </summary>
            <value>
            The current <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> for this factory instance.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2.RoleManager">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Identity.RoleManager`1"/> for this factory.
            </summary>
            <value>
            The current <see cref="T:Microsoft.AspNetCore.Identity.RoleManager`1"/> for this factory instance.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2.Options">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Builder.IdentityOptions"/> for this factory.
            </summary>
            <value>
            The current <see cref="T:Microsoft.AspNetCore.Builder.IdentityOptions"/> for this factory instance.
            </value>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2.CreateAsync(`0)">
            <summary>
            Creates a <see cref="T:System.Security.Claims.ClaimsPrincipal"/> from an user asynchronously.
            </summary>
            <param name="user">The user to create a <see cref="T:System.Security.Claims.ClaimsPrincipal"/> from.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous creation operation, containing the created <see cref="T:System.Security.Claims.ClaimsPrincipal"/>.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.UserLoginInfo">
            <summary>
            Represents login information and source for a user record.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserLoginInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNetCore.Identity.UserLoginInfo"/>
            </summary>
            <param name="loginProvider">The provider associated with this login information.</param>
            <param name="providerKey">The unique identifier for this user provided by the login provider.</param>
            <param name="displayName">The display name for this user provided by the login provider.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.UserLoginInfo.LoginProvider">
            <summary>
            Gets or sets the provider for this instance of <see cref="T:Microsoft.AspNetCore.Identity.UserLoginInfo"/>.
            </summary>
            <value>The provider for the this instance of <see cref="T:Microsoft.AspNetCore.Identity.UserLoginInfo"/></value>
            <remarks>
            Examples of the provider may be Local, Facebook, Google, etc.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.UserLoginInfo.ProviderKey">
            <summary>
            Gets or sets the unique identifier for the user identity user provided by the login provider.
            </summary>
            <value>
            The unique identifier for the user identity user provided by the login provider.
            </value>
            <remarks>
            This would be unique per provider, examples may be @microsoft as a Twitter provider key.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.UserLoginInfo.ProviderDisplayName">
            <summary>
            Gets or sets the display name for the provider.
            </summary>
            <value>
            The display name for the provider.
            </value>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.UserManager`1">
            <summary>
            Provides the APIs for managing user in a persistence store.
            </summary>
            <typeparam name="TUser">The type encapsulating a user.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.#ctor(Microsoft.AspNetCore.Identity.IUserStore{`0},Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.IdentityOptions},Microsoft.AspNetCore.Identity.IPasswordHasher{`0},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IUserValidator{`0}},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IPasswordValidator{`0}},Microsoft.AspNetCore.Identity.ILookupNormalizer,Microsoft.AspNetCore.Identity.IdentityErrorDescriber,System.IServiceProvider,Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.UserManager{`0}})">
            <summary>
            Constructs a new instance of <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/>.
            </summary>
            <param name="store">The persistence store the manager will operate over.</param>
            <param name="optionsAccessor">The accessor used to access the <see cref="T:Microsoft.AspNetCore.Builder.IdentityOptions"/>.</param>
            <param name="passwordHasher">The password hashing implementation to use when saving passwords.</param>
            <param name="userValidators">A collection of <see cref="T:Microsoft.AspNetCore.Identity.IUserValidator`1"/> to validate users against.</param>
            <param name="passwordValidators">A collection of <see cref="T:Microsoft.AspNetCore.Identity.IPasswordValidator`1"/> to validate passwords against.</param>
            <param name="keyNormalizer">The <see cref="T:Microsoft.AspNetCore.Identity.ILookupNormalizer"/> to use when generating index keys for users.</param>
            <param name="errors">The <see cref="T:Microsoft.AspNetCore.Identity.IdentityErrorDescriber"/> used to provider error messages.</param>
            <param name="services">The <see cref="T:System.IServiceProvider"/> used to resolve services.</param>
            <param name="logger">The logger used to log messages, warnings and errors.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.UserManager`1.Store">
            <summary>
            Gets or sets the persistence store the manager operates over.
            </summary>
            <value>The persistence store the manager operates over.</value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.UserManager`1.Logger">
            <summary>
            Gets the <see cref="T:Microsoft.Extensions.Logging.ILogger"/> used to log messages from the manager.
            </summary>
            <value>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> used to log messages from the manager.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserAuthenticationTokens">
            <summary>
            Gets a flag indicating whether the backing user store supports authentication tokens.
            </summary>
            <value>
            true if the backing user store supports  authentication tokens, otherwise false.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserTwoFactor">
            <summary>
            Gets a flag indicating whether the backing user store supports two factor authentication.
            </summary>
            <value>
            true if the backing user store supports user two factor authentication, otherwise false.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserPassword">
            <summary>
            Gets a flag indicating whether the backing user store supports user passwords.
            </summary>
            <value>
            true if the backing user store supports user passwords, otherwise false.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserSecurityStamp">
            <summary>
            Gets a flag indicating whether the backing user store supports security stamps.
            </summary>
            <value>
            true if the backing user store supports user security stamps, otherwise false.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserRole">
            <summary>
            Gets a flag indicating whether the backing user store supports user roles.
            </summary>
            <value>
            true if the backing user store supports user roles, otherwise false.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserLogin">
            <summary>
            Gets a flag indicating whether the backing user store supports external logins.
            </summary>
            <value>
            true if the backing user store supports external logins, otherwise false.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserEmail">
            <summary>
            Gets a flag indicating whether the backing user store supports user emails.
            </summary>
            <value>
            true if the backing user store supports user emails, otherwise false.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserPhoneNumber">
            <summary>
            Gets a flag indicating whether the backing user store supports user telephone numbers.
            </summary>
            <value>
            true if the backing user store supports user telephone numbers, otherwise false.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserClaim">
            <summary>
            Gets a flag indicating whether the backing user store supports user claims.
            </summary>
            <value>
            true if the backing user store supports user claims, otherwise false.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserLockout">
            <summary>
            Gets a flag indicating whether the backing user store supports user lock-outs.
            </summary>
            <value>
            true if the backing user store supports user lock-outs, otherwise false.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsQueryableUsers">
            <summary>
            Gets a flag indicating whether the backing user store supports returning
            <see cref="T:System.Linq.IQueryable"/> collections of information.
            </summary>
            <value>
            true if the backing user store supports returning <see cref="T:System.Linq.IQueryable"/> collections of
            information, otherwise false.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.UserManager`1.Users">
            <summary>
                Returns an IQueryable of users if the store is an IQueryableUserStore
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.Dispose">
            <summary>
            Releases all resources used by the user manager.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.GetUserName(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Returns the Name claim value if present otherwise returns null.
            </summary>
            <param name="principal">The <see cref="T:System.Security.Claims.ClaimsPrincipal"/> instance.</param>
            <returns>The Name claim value, or null if the claim is not present.</returns>
            <remarks>The Name claim is identified by <see cref="F:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType"/>.</remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.GetUserId(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Returns the User ID claim value if present otherwise returns null.
            </summary>
            <param name="principal">The <see cref="T:System.Security.Claims.ClaimsPrincipal"/> instance.</param>
            <returns>The User ID claim value, or null if the claim is not present.</returns>
            <remarks>The User ID claim is identified by <see cref="F:System.Security.Claims.ClaimTypes.NameIdentifier"/>.</remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.GenerateConcurrencyStampAsync(`0)">
            <summary>
            Generates a value suitable for use in concurrency tracking.
            </summary>
            <param name="user">The user to generate the stamp for.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the security
            stamp for the specified <paramref name="user"/>.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.CreateAsync(`0)">
            <summary>
            Creates the specified <paramref name="user"/> in the backing store with no password,
            as an asynchronous operation.
            </summary>
            <param name="user">The user to create.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.UpdateAsync(`0)">
            <summary>
            Updates the specified <paramref name="user"/> in the backing store.
            </summary>
            <param name="user">The user to update.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.DeleteAsync(`0)">
            <summary>
            Deletes the specified <paramref name="user"/> from the backing store.
            </summary>
            <param name="user">The user to delete.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.FindByIdAsync(System.String)">
            <summary>
            Finds and returns a user, if any, who has the specified <paramref name="userId"/>.
            </summary>
            <param name="userId">The user ID to search for.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the user matching the specified <paramref name="userId"/> if it exists.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.FindByNameAsync(System.String)">
            <summary>
            Finds and returns a user, if any, who has the specified user name.
            </summary>
            <param name="userName">The user name to search for.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the user matching the specified <paramref name="userName"/> if it exists.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.CreateAsync(`0,System.String)">
            <summary>
            Creates the specified <paramref name="user"/> in the backing store with given password,
            as an asynchronous operation.
            </summary>
            <param name="user">The user to create.</param>
            <param name="password">The password for the user to hash and store.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.NormalizeKey(System.String)">
            <summary>
            Normalize a key (user name, email) for consistent comparisons.
            </summary>
            <param name="key">The key to normalize.</param>
            <returns>A normalized value representing the specified <paramref name="key"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.UpdateNormalizedUserNameAsync(`0)">
            <summary>
            Updates the normalized user name for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose user name should be normalized and updated.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.GetUserNameAsync(`0)">
            <summary>
            Gets the user name for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose name should be retrieved.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the name for the specified <paramref name="user"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.SetUserNameAsync(`0,System.String)">
            <summary>
            Sets the given <paramref name="userName" /> for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose name should be set.</param>
            <param name="userName">The user name to set.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.GetUserIdAsync(`0)">
            <summary>
            Gets the user identifier for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose identifier should be retrieved.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the identifier for the specified <paramref name="user"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.CheckPasswordAsync(`0,System.String)">
            <summary>
            Returns a flag indicating whether the given <paramref name="password"/> is valid for the
            specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose password should be validated.</param>
            <param name="password">The password to validate</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing true if
            the specified <paramref name="password" /> matches the one store for the <paramref name="user"/>,
            otherwise false.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.HasPasswordAsync(`0)">
            <summary>
            Gets a flag indicating whether the specified <paramref name="user"/> has a password.
            </summary>
            <param name="user">The user to return a flag for, indicating whether they have a password or not.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, returning true if the specified <paramref name="user"/> has a password
            otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.AddPasswordAsync(`0,System.String)">
            <summary>
            Adds the <paramref name="password"/> to the specified <paramref name="user"/> only if the user
            does not already have a password.
            </summary>
            <param name="user">The user whose password should be set.</param>
            <param name="password">The password to set.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.ChangePasswordAsync(`0,System.String,System.String)">
            <summary>
            Changes a user's password after confirming the specified <paramref name="currentPassword"/> is correct,
            as an asynchronous operation.
            </summary>
            <param name="user">The user whose password should be set.</param>
            <param name="currentPassword">The current password to validate before changing.</param>
            <param name="newPassword">The new password to set for the specified <paramref name="user"/>.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.RemovePasswordAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Removes a user's password.
            </summary>
            <param name="user">The user whose password should be removed.</param>
            <param name="cancellationToken">The <see cref="P:Microsoft.AspNetCore.Identity.UserManager`1.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.VerifyPasswordAsync(Microsoft.AspNetCore.Identity.IUserPasswordStore{`0},`0,System.String)">
            <summary>
            Returns a <see cref="T:Microsoft.AspNetCore.Identity.PasswordVerificationResult"/> indicating the result of a password hash comparison.
            </summary>
            <param name="store">The store containing a user's password.</param>
            <param name="user">The user whose password should be verified.</param>
            <param name="password">The password to verify.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.PasswordVerificationResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.GetSecurityStampAsync(`0)">
            <summary>
            Get the security stamp for the specified <paramref name="user" />.
            </summary>
            <param name="user">The user whose security stamp should be set.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the security stamp for the specified <paramref name="user"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.UpdateSecurityStampAsync(`0)">
            <summary>
            Regenerates the security stamp for the specified <paramref name="user" />.
            </summary>
            <param name="user">The user whose security stamp should be regenerated.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
            <remarks>
            Regenerating a security stamp will sign out any saved login for the user.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.GeneratePasswordResetTokenAsync(`0)">
            <summary>
            Generates a password reset token for the specified <paramref name="user"/>, using
            the configured password reset token provider.
            </summary>
            <param name="user">The user to generate a password reset token for.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation,
            containing a password reset token for the specified <paramref name="user"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.ResetPasswordAsync(`0,System.String,System.String)">
            <summary>
            Resets the <paramref name="user"/>'s password to the specified <paramref name="newPassword"/> after
            validating the given password reset <paramref name="token"/>.
            </summary>
            <param name="user">The user whose password should be reset.</param>
            <param name="token">The password reset token to verify.</param>
            <param name="newPassword">The new password to set if reset token verification fails.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.FindByLoginAsync(System.String,System.String)">
            <summary>
            Retrieves the user associated with the specified external login provider and login provider key..
            </summary>
            <param name="loginProvider">The login provider who provided the <paramref name="providerKey"/>.</param>
            <param name="providerKey">The key provided by the <paramref name="loginProvider"/> to identify a user.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> for the asynchronous operation, containing the user, if any which matched the specified login provider and key.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.RemoveLoginAsync(`0,System.String,System.String)">
            <summary>
            Attempts to remove the provided external login information from the specified <paramref name="user"/>.
            and returns a flag indicating whether the removal succeed or not.
            </summary>
            <param name="user">The user to remove the login information from.</param>
            <param name="loginProvider">The login provide whose information should be removed.</param>
            <param name="providerKey">The key given by the external login provider for the specified user.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo)">
            <summary>
            Adds an external <see cref="T:Microsoft.AspNetCore.Identity.UserLoginInfo"/> to the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user to add the login to.</param>
            <param name="login">The external <see cref="T:Microsoft.AspNetCore.Identity.UserLoginInfo"/> to add to the specified <paramref name="user"/>.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.GetLoginsAsync(`0)">
            <summary>
            Retrieves the associated logins for the specified <param ref="user"/>.
            </summary>
            <param name="user">The user whose associated logins to retrieve.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> for the asynchronous operation, containing a list of <see cref="T:Microsoft.AspNetCore.Identity.UserLoginInfo"/> for the specified <paramref name="user"/>, if any.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.AddClaimAsync(`0,System.Security.Claims.Claim)">
            <summary>
            Adds the specified <paramref name="claim"/> to the <paramref name="user"/>.
            </summary>
            <param name="user">The user to add the claim to.</param>
            <param name="claim">The claim to add.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Adds the specified <paramref name="claims"/> to the <paramref name="user"/>.
            </summary>
            <param name="user">The user to add the claim to.</param>
            <param name="claims">The claims to add.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim)">
            <summary>
            Replaces the given <paramref name="claim"/> on the specified <paramref name="user"/> with the <paramref name="newClaim"/>
            </summary>
            <param name="user">The user to replace the claim on.</param>
            <param name="claim">The claim to replace.</param>
            <param name="newClaim">The new claim to replace the existing <paramref name="claim"/> with.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.RemoveClaimAsync(`0,System.Security.Claims.Claim)">
            <summary>
            Removes the specified <paramref name="claim"/> from the given <paramref name="user"/>.
            </summary>
            <param name="user">The user to remove the specified <paramref name="claim"/> from.</param>
            <param name="claim">The <see cref="T:System.Security.Claims.Claim"/> to remove.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Removes the specified <paramref name="claims"/> from the given <paramref name="user"/>.
            </summary>
            <param name="user">The user to remove the specified <paramref name="claims"/> from.</param>
            <param name="claims">A collection of <see cref="T:System.Security.Claims.Claim"/>s to remove.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.GetClaimsAsync(`0)">
            <summary>
            Gets a list of <see cref="T:System.Security.Claims.Claim"/>s to be belonging to the specified <paramref name="user"/> as an asynchronous operation.
            </summary>
            <param name="user">The user whose claims to retrieve.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the result of the asynchronous query, a list of <see cref="T:System.Security.Claims.Claim"/>s.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.AddToRoleAsync(`0,System.String)">
            <summary>
            Add the specified <paramref name="user"/> to the named role.
            </summary>
            <param name="user">The user to add to the named role.</param>
            <param name="role">The name of the role to add the user to.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.AddToRolesAsync(`0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add the specified <paramref name="user"/> to the named roles.
            </summary>
            <param name="user">The user to add to the named roles.</param>
            <param name="roles">The name of the roles to add the user to.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.RemoveFromRoleAsync(`0,System.String)">
            <summary>
            Removes the specified <paramref name="user"/> from the named role.
            </summary>
            <param name="user">The user to remove from the named role.</param>
            <param name="role">The name of the role to remove the user from.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.RemoveFromRolesAsync(`0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes the specified <paramref name="user"/> from the named roles.
            </summary>
            <param name="user">The user to remove from the named roles.</param>
            <param name="roles">The name of the roles to remove the user from.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.GetRolesAsync(`0)">
            <summary>
            Gets a list of role names the specified <paramref name="user"/> belongs to.
            </summary>
            <param name="user">The user whose role names to retrieve.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing a list of role names.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.IsInRoleAsync(`0,System.String)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="user"/> is a member of the give named role.
            </summary>
            <param name="user">The user whose role membership should be checked.</param>
            <param name="role">The name of the role to be checked.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing a flag indicating whether the specified <paramref name="user"/> is
            a member of the named role.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.GetEmailAsync(`0)">
            <summary>
            Gets the email address for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose email should be returned.</param>
            <returns>The task object containing the results of the asynchronous operation, the email address for the specified <paramref name="user"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.SetEmailAsync(`0,System.String)">
            <summary>
            Sets the <paramref name="email"/> address for a <paramref name="user"/>.
            </summary>
            <param name="user">The user whose email should be set.</param>
            <param name="email">The email to set.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.FindByEmailAsync(System.String)">
            <summary>
            Gets the user, if any, associated with the specified, normalized email address.
            </summary>
            <param name="email">The normalized email address to return the user for.</param>
            <returns>
            The task object containing the results of the asynchronous lookup operation, the user if any associated with the specified normalized email address.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.UpdateNormalizedEmailAsync(`0)">
            <summary>
            Updates the normalized email for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose email address should be normalized and updated.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.GenerateEmailConfirmationTokenAsync(`0)">
            <summary>
            Generates an email confirmation token for the specified user.
            </summary>
            <param name="user">The user to generate an email confirmation token for.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, an email confirmation token.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.ConfirmEmailAsync(`0,System.String)">
            <summary>
            Validates that an email confirmation token matches the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user to validate the token against.</param>
            <param name="token">The email confirmation token to validate.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.IsEmailConfirmedAsync(`0)">
            <summary>
            Gets a flag indicating whether the email address for the specified <paramref name="user"/> has been verified, true if the email address is verified otherwise
            false.
            </summary>
            <param name="user">The user whose email confirmation status should be returned.</param>
            <returns>
            The task object containing the results of the asynchronous operation, a flag indicating whether the email address for the specified <paramref name="user"/>
            has been confirmed or not.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.GenerateChangeEmailTokenAsync(`0,System.String)">
            <summary>
            Generates an email change token for the specified user.
            </summary>
            <param name="user">The user to generate an email change token for.</param>
            <param name="newEmail">The new email address.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, an email change token.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.ChangeEmailAsync(`0,System.String,System.String)">
            <summary>
            Updates a users emails if the specified email change <paramref name="token"/> is valid for the user.
            </summary>
            <param name="user">The user whose email should be updated.</param>
            <param name="newEmail">The new email address.</param>
            <param name="token">The change email token to be verified.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.GetPhoneNumberAsync(`0)">
            <summary>
            Gets the telephone number, if any, for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose telephone number should be retrieved.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the user's telephone number, if any.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.SetPhoneNumberAsync(`0,System.String)">
            <summary>
            Sets the phone number for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose phone number to set.</param>
            <param name="phoneNumber">The phone number to set.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.ChangePhoneNumberAsync(`0,System.String,System.String)">
            <summary>
            Sets the phone number for the specified <paramref name="user"/> if the specified
            change <paramref name="token"/> is valid.
            </summary>
            <param name="user">The user whose phone number to set.</param>
            <param name="phoneNumber">The phone number to set.</param>
            <param name="token">The phone number confirmation token to validate.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.IsPhoneNumberConfirmedAsync(`0)">
            <summary>
            Gets a flag indicating whether the specified <paramref name="user"/>'s telephone number has been confirmed.
            </summary>
            <param name="user">The user to return a flag for, indicating whether their telephone number is confirmed.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, returning true if the specified <paramref name="user"/> has a confirmed
            telephone number otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.GenerateChangePhoneNumberTokenAsync(`0,System.String)">
            <summary>
            Generates a telephone number change token for the specified user.
            </summary>
            <param name="user">The user to generate a telephone number token for.</param>
            <param name="phoneNumber">The new phone number the validation token should be sent to.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the telephone change number token.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.VerifyChangePhoneNumberTokenAsync(`0,System.String,System.String)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="user"/>'s phone number change verification
            token is valid for the given <paramref name="phoneNumber"/>.
            </summary>
            <param name="user">The user to validate the token against.</param>
            <param name="token">The telephone number change token to validate.</param>
            <param name="phoneNumber">The telephone number the token was generated for.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, returning true if the <paramref name="token"/>
            is valid, otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.VerifyUserTokenAsync(`0,System.String,System.String,System.String)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="token"/> is valid for
            the given <paramref name="user"/> and <paramref name="purpose"/>.
            </summary>
            <param name="user">The user to validate the token against.</param>
            <param name="tokenProvider">The token provider used to generate the token.</param>
            <param name="purpose">The purpose the token should be generated for.</param>
            <param name="token">The token to validate</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, returning true if the <paramref name="token"/>
            is valid, otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.GenerateUserTokenAsync(`0,System.String,System.String)">
            <summary>
            Generates a token for the given <paramref name="user"/> and <paramref name="purpose"/>.
            </summary>
            <param name="purpose">The purpose the token will be for.</param>
            <param name="user">The user the token will be for.</param>
            <param name="tokenProvider">The provider which will generate the token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents result of the asynchronous operation, a token for
            the given user and purpose.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.RegisterTokenProvider(System.String,Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider{`0})">
            <summary>
            Registers a token provider.
            </summary>
            <param name="providerName">The name of the provider to register.</param>
            <param name="provider">The provider to register.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.GetValidTwoFactorProvidersAsync(`0)">
            <summary>
            Gets a list of valid two factor token providers for the specified <paramref name="user"/>,
            as an asynchronous operation.
            </summary>
            <param name="user">The user the whose two factor authentication providers will be returned.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents result of the asynchronous operation, a list of two
            factor authentication providers for the specified user.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.VerifyTwoFactorTokenAsync(`0,System.String,System.String)">
            <summary>
            Verifies the specified two factor authentication <paramref name="token" /> against the <paramref name="user"/>.
            </summary>
            <param name="user">The user the token is supposed to be for.</param>
            <param name="tokenProvider">The provider which will verify the token.</param>
            <param name="token">The token to verify.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents result of the asynchronous operation, true if the token is valid,
            otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.GenerateTwoFactorTokenAsync(`0,System.String)">
            <summary>
            Gets a two factor authentication token for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user the token is for.</param>
            <param name="tokenProvider">The provider which will generate the token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents result of the asynchronous operation, a two factor authentication token
            for the user.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.GetTwoFactorEnabledAsync(`0)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="user"/> has two factor authentication enabled or not,
            as an asynchronous operation.
            </summary>
            <param name="user">The user whose two factor authentication enabled status should be retrieved.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, true if the specified <paramref name="user "/>
            has two factor authentication enabled, otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.SetTwoFactorEnabledAsync(`0,System.Boolean)">
            <summary>
            Sets a flag indicating whether the specified <paramref name="user"/> has two factor authentication enabled or not,
            as an asynchronous operation.
            </summary>
            <param name="user">The user whose two factor authentication enabled status should be set.</param>
            <param name="enabled">A flag indicating whether the specified <paramref name="user"/> has two factor authentication enabled.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> of the operation
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.IsLockedOutAsync(`0)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="user"/> his locked out,
            as an asynchronous operation.
            </summary>
            <param name="user">The user whose locked out status should be retrieved.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, true if the specified <paramref name="user "/>
            is locked out, otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.SetLockoutEnabledAsync(`0,System.Boolean)">
            <summary>
            Sets a flag indicating whether the specified <paramref name="user"/> is locked out,
            as an asynchronous operation.
            </summary>
            <param name="user">The user whose locked out status should be set.</param>
            <param name="enabled">Flag indicating whether the user is locked out or not.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> of the operation
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.GetLockoutEnabledAsync(`0)">
            <summary>
            Retrieves a flag indicating whether user lockout can enabled for the specified user.
            </summary>
            <param name="user">The user whose ability to be locked out should be returned.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, true if a user can be locked out, otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.GetLockoutEndDateAsync(`0)">
            <summary>
            Gets the last <see cref="T:System.DateTimeOffset"/> a user's last lockout expired, if any.
            Any time in the past should be indicates a user is not locked out.
            </summary>
            <param name="user">The user whose lockout date should be retrieved.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the lookup, a <see cref="T:System.DateTimeOffset"/> containing the last time a user's lockout expired, if any.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset})">
            <summary>
            Locks out a user until the specified end date has passed. Setting a end date in the past immediately unlocks a user.
            </summary>
            <param name="user">The user whose lockout date should be set.</param>
            <param name="lockoutEnd">The <see cref="T:System.DateTimeOffset"/> after which the <paramref name="user"/>'s lockout should end.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> of the operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.AccessFailedAsync(`0)">
            <summary>
            Increments the access failed count for the user as an asynchronous operation.
            If the failed access account is greater than or equal to the configured maximum number of attempts,
            the user will be locked out for the configured lockout time span.
            </summary>
            <param name="user">The user whose failed access count to increment.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> of the operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.ResetAccessFailedCountAsync(`0)">
            <summary>
            Resets the access failed count for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose failed access count should be reset.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> of the operation.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.GetAccessFailedCountAsync(`0)">
            <summary>
            Retrieves the current number of failed accesses for the given <paramref name="user"/>.
            </summary>
            <param name="user">The user whose access failed count should be retrieved for.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that contains the result the asynchronous operation, the current failed access count
            for the user.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.GetUsersForClaimAsync(System.Security.Claims.Claim)">
            <summary>
            Returns a list of users from the user store who have the specified <paramref name="claim"/>.
            </summary>
            <param name="claim">The claim to look for.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the result of the asynchronous query, a list of <typeparamref name="TUser"/>s who
            have the specified claim.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.GetUsersInRoleAsync(System.String)">
            <summary>
            Returns a list of users from the user store who are members of the specified <paramref name="roleName"/>.
            </summary>
            <param name="roleName">The name of the role whose users should be returned.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the result of the asynchronous query, a list of <typeparamref name="TUser"/>s who
            are members of the specified role.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.GetAuthenticationTokenAsync(`0,System.String,System.String)">
            <summary>
            Returns an authentication token for a user.
            </summary>
            <param name="user"></param>
            <param name="loginProvider">The authentication scheme for the provider the token is associated with.</param>
            <param name="tokenName">The name of the token.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.SetAuthenticationTokenAsync(`0,System.String,System.String,System.String)">
            <summary>
            Sets an authentication token for a user.
            </summary>
            <param name="user"></param>
            <param name="loginProvider">The authentication scheme for the provider the token is associated with.</param>
            <param name="tokenName">The name of the token.</param>
            <param name="tokenValue">The value of the token.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.RemoveAuthenticationTokenAsync(`0,System.String,System.String)">
            <summary>
            Remove an authentication token for a user.
            </summary>
            <param name="user"></param>
            <param name="loginProvider">The authentication scheme for the provider the token is associated with.</param>
            <param name="tokenName">The name of the token.</param>
            <returns>Whether a token was removed.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the role manager and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserManager`1.GetChangeEmailTokenPurpose(System.String)">
            <summary>
            Generates the token purpose used to change email
            </summary>
            <param name="newEmail"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.UserOptions">
            <summary>
            Options for user validation.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.UserOptions.AllowedUserNameCharacters">
            <summary>
            Gets or sets the list of allowed characters in the username used to validate user names.
            </summary>
            <value>
            The list of allowed characters in the username used to validate user names.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.UserOptions.RequireUniqueEmail">
            <summary>
            Gets or sets a flag indicating whether the application requires unique emails for its users.
            </summary>
            <value>
            True if the application requires each user to have their own, unique email, otherwise false.
            </value>
        </member>
        <member name="T:Microsoft.AspNetCore.Identity.UserValidator`1">
            <summary>
            Provides validation services for user classes.
            </summary>
            <typeparam name="TUser">The type encapsulating a user.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserValidator`1.#ctor(Microsoft.AspNetCore.Identity.IdentityErrorDescriber)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNetCore.Identity.UserValidator`1"/>/
            </summary>
            <param name="errors">The <see cref="T:Microsoft.AspNetCore.Identity.IdentityErrorDescriber"/> used to provider error messages.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.UserValidator`1.Describer">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Identity.IdentityErrorDescriber"/> used to provider error messages for the current <see cref="T:Microsoft.AspNetCore.Identity.UserValidator`1"/>.
            </summary>
            <value>Yhe <see cref="T:Microsoft.AspNetCore.Identity.IdentityErrorDescriber"/> used to provider error messages for the current <see cref="T:Microsoft.AspNetCore.Identity.UserValidator`1"/>.</value>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.UserValidator`1.ValidateAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0)">
            <summary>
            Validates the specified <paramref name="user"/> as an asynchronous operation.
            </summary>
            <param name="manager">The <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> that can be used to retrieve user properties.</param>
            <param name="user">The user to validate.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> of the validation operation.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.ConcurrencyFailure">
            <summary>
            Optimistic concurrency failure, object has been modified.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatConcurrencyFailure">
            <summary>
            Optimistic concurrency failure, object has been modified.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.DefaultError">
            <summary>
            An unknown failure has occurred.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatDefaultError">
            <summary>
            An unknown failure has occurred.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.DuplicateEmail">
            <summary>
            Email '{0}' is already taken.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatDuplicateEmail(System.Object)">
            <summary>
            Email '{0}' is already taken.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.DuplicateRoleName">
            <summary>
            Role name '{0}' is already taken.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatDuplicateRoleName(System.Object)">
            <summary>
            Role name '{0}' is already taken.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.DuplicateUserName">
            <summary>
            User name '{0}' is already taken.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatDuplicateUserName(System.Object)">
            <summary>
            User name '{0}' is already taken.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.InvalidEmail">
            <summary>
            Email '{0}' is invalid.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatInvalidEmail(System.Object)">
            <summary>
            Email '{0}' is invalid.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.InvalidManagerType">
            <summary>
            Type {0} must derive from {1}&lt;{2}&gt;.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatInvalidManagerType(System.Object,System.Object,System.Object)">
            <summary>
            Type {0} must derive from {1}&lt;{2}&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.InvalidPasswordHasherCompatibilityMode">
            <summary>
            The provided PasswordHasherCompatibilityMode is invalid.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatInvalidPasswordHasherCompatibilityMode">
            <summary>
            The provided PasswordHasherCompatibilityMode is invalid.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.InvalidPasswordHasherIterationCount">
            <summary>
            The iteration count must be a positive integer.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatInvalidPasswordHasherIterationCount">
            <summary>
            The iteration count must be a positive integer.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.InvalidRoleName">
            <summary>
            Role name '{0}' is invalid.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatInvalidRoleName(System.Object)">
            <summary>
            Role name '{0}' is invalid.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.InvalidToken">
            <summary>
            Invalid token.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatInvalidToken">
            <summary>
            Invalid token.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.InvalidUserName">
            <summary>
            User name '{0}' is invalid, can only contain letters or digits.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatInvalidUserName(System.Object)">
            <summary>
            User name '{0}' is invalid, can only contain letters or digits.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.LoginAlreadyAssociated">
            <summary>
            A user with this login already exists.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatLoginAlreadyAssociated">
            <summary>
            A user with this login already exists.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.MustCallAddIdentity">
            <summary>
            AddIdentity must be called on the service collection.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatMustCallAddIdentity">
            <summary>
            AddIdentity must be called on the service collection.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.NoTokenProvider">
            <summary>
            No IUserTokenProvider named '{0}' is registered.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatNoTokenProvider(System.Object)">
            <summary>
            No IUserTokenProvider named '{0}' is registered.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.PasswordMismatch">
            <summary>
            Incorrect password.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatPasswordMismatch">
            <summary>
            Incorrect password.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.PasswordRequiresDigit">
            <summary>
            Passwords must have at least one digit ('0'-'9').
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatPasswordRequiresDigit">
            <summary>
            Passwords must have at least one digit ('0'-'9').
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.PasswordRequiresLower">
            <summary>
            Passwords must have at least one lowercase ('a'-'z').
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatPasswordRequiresLower">
            <summary>
            Passwords must have at least one lowercase ('a'-'z').
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.PasswordRequiresNonAlphanumeric">
            <summary>
            Passwords must have at least one non alphanumeric character.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatPasswordRequiresNonAlphanumeric">
            <summary>
            Passwords must have at least one non alphanumeric character.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.PasswordRequiresUpper">
            <summary>
            Passwords must have at least one uppercase ('A'-'Z').
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatPasswordRequiresUpper">
            <summary>
            Passwords must have at least one uppercase ('A'-'Z').
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.PasswordTooShort">
            <summary>
            Passwords must be at least {0} characters.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatPasswordTooShort(System.Object)">
            <summary>
            Passwords must be at least {0} characters.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.RoleNotFound">
            <summary>
            Role {0} does not exist.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatRoleNotFound(System.Object)">
            <summary>
            Role {0} does not exist.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.StoreNotIQueryableRoleStore">
            <summary>
            Store does not implement IQueryableRoleStore&lt;TRole&gt;.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatStoreNotIQueryableRoleStore">
            <summary>
            Store does not implement IQueryableRoleStore&lt;TRole&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.StoreNotIQueryableUserStore">
            <summary>
            Store does not implement IQueryableUserStore&lt;TUser&gt;.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatStoreNotIQueryableUserStore">
            <summary>
            Store does not implement IQueryableUserStore&lt;TUser&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.StoreNotIRoleClaimStore">
            <summary>
            Store does not implement IRoleClaimStore&lt;TRole&gt;.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatStoreNotIRoleClaimStore">
            <summary>
            Store does not implement IRoleClaimStore&lt;TRole&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.StoreNotIUserClaimStore">
            <summary>
            Store does not implement IUserClaimStore&lt;TUser&gt;.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatStoreNotIUserClaimStore">
            <summary>
            Store does not implement IUserClaimStore&lt;TUser&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.StoreNotIUserConfirmationStore">
            <summary>
            Store does not implement IUserConfirmationStore&lt;TUser&gt;.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatStoreNotIUserConfirmationStore">
            <summary>
            Store does not implement IUserConfirmationStore&lt;TUser&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.StoreNotIUserEmailStore">
            <summary>
            Store does not implement IUserEmailStore&lt;TUser&gt;.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatStoreNotIUserEmailStore">
            <summary>
            Store does not implement IUserEmailStore&lt;TUser&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.StoreNotIUserLockoutStore">
            <summary>
            Store does not implement IUserLockoutStore&lt;TUser&gt;.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatStoreNotIUserLockoutStore">
            <summary>
            Store does not implement IUserLockoutStore&lt;TUser&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.StoreNotIUserLoginStore">
            <summary>
            Store does not implement IUserLoginStore&lt;TUser&gt;.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatStoreNotIUserLoginStore">
            <summary>
            Store does not implement IUserLoginStore&lt;TUser&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.StoreNotIUserPasswordStore">
            <summary>
            Store does not implement IUserPasswordStore&lt;TUser&gt;.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatStoreNotIUserPasswordStore">
            <summary>
            Store does not implement IUserPasswordStore&lt;TUser&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.StoreNotIUserPhoneNumberStore">
            <summary>
            Store does not implement IUserPhoneNumberStore&lt;TUser&gt;.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatStoreNotIUserPhoneNumberStore">
            <summary>
            Store does not implement IUserPhoneNumberStore&lt;TUser&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.StoreNotIUserRoleStore">
            <summary>
            Store does not implement IUserRoleStore&lt;TUser&gt;.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatStoreNotIUserRoleStore">
            <summary>
            Store does not implement IUserRoleStore&lt;TUser&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.StoreNotIUserSecurityStampStore">
            <summary>
            Store does not implement IUserSecurityStampStore&lt;TUser&gt;.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatStoreNotIUserSecurityStampStore">
            <summary>
            Store does not implement IUserSecurityStampStore&lt;TUser&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.StoreNotIUserTwoFactorStore">
            <summary>
            Store does not implement IUserTwoFactorStore&lt;TUser&gt;.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatStoreNotIUserTwoFactorStore">
            <summary>
            Store does not implement IUserTwoFactorStore&lt;TUser&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.UserAlreadyHasPassword">
            <summary>
            User already has a password set.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatUserAlreadyHasPassword">
            <summary>
            User already has a password set.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.UserAlreadyInRole">
            <summary>
            User already in role '{0}'.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatUserAlreadyInRole(System.Object)">
            <summary>
            User already in role '{0}'.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.UserLockedOut">
            <summary>
            User is locked out.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatUserLockedOut">
            <summary>
            User is locked out.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.UserLockoutNotEnabled">
            <summary>
            Lockout is not enabled for this user.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatUserLockoutNotEnabled">
            <summary>
            Lockout is not enabled for this user.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.UserNameNotFound">
            <summary>
            User {0} does not exist.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatUserNameNotFound(System.Object)">
            <summary>
            User {0} does not exist.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Identity.Resources.UserNotInRole">
            <summary>
            User is not in role '{0}'.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Identity.Resources.FormatUserNotInRole(System.Object)">
            <summary>
            User is not in role '{0}'.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.IdentityServiceCollectionExtensions">
            <summary>
            Contains extension methods to <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> for configuring identity services.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServiceCollectionExtensions.AddIdentity``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the default identity system configuration for the specified User and Role types.
            </summary>
            <typeparam name="TUser">The type representing a User in the system.</typeparam>
            <typeparam name="TRole">The type representing a Role in the system.</typeparam>
            <param name="services">The services available in the application.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Identity.IdentityBuilder"/> for creating and configuring the identity system.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IdentityServiceCollectionExtensions.AddIdentity``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Builder.IdentityOptions})">
            <summary>
            Adds and configures the identity system for the specified User and Role types.
            </summary>
            <typeparam name="TUser">The type representing a User in the system.</typeparam>
            <typeparam name="TRole">The type representing a Role in the system.</typeparam>
            <param name="services">The services available in the application.</param>
            <param name="setupAction">An action to configure the <see cref="T:Microsoft.AspNetCore.Builder.IdentityOptions"/>.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Identity.IdentityBuilder"/> for creating and configuring the identity system.</returns>
        </member>
        <member name="T:System.Security.Claims.PrincipalExtensions">
            <summary>
            Claims related extensions for <see cref="T:System.Security.Claims.ClaimsPrincipal"/>.
            </summary>
        </member>
        <member name="M:System.Security.Claims.PrincipalExtensions.FindFirstValue(System.Security.Claims.ClaimsPrincipal,System.String)">
            <summary>
            Returns the value for the first claim of the specified type otherwise null the claim is not present.
            </summary>
            <param name="principal">The <see cref="T:System.Security.Claims.ClaimsPrincipal"/> instance this method extends.</param>
            <param name="claimType">The claim type whose first value should be returned.</param>
            <returns>The value of the first instance of the specified claim type, or null if the claim is not present.</returns>
        </member>
    </members>
</doc>
