using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

namespace Caseiro.Mvc.PagedList
{
	/// <summary>
	/// Subset of a collection of objects containing paging information
	/// </summary>
	/// <typeparam name="T">The type of the object the collection should contain</typeparam>
	public class PagedList<T> : List<T>
	{

		/// <summary>
		/// Total number of items in the collection
		/// </summary>
		public int TotalCount { get; private set; }

		/// <summary>
		/// Actual page number
		/// </summary>
		public int ActualPage { get; private set; }

		/// <summary>
		/// Number of pages generated by the colletion
		/// </summary>
		public int PageCount { get; private set; }

		/// <summary>
		/// Number of items per page
		/// </summary>
		public int PageSize { get; private set; }

		/// <summary>
		/// Number of page to show by the pager
		/// </summary>
		public int PagerSize { get { return 10; } }

		/// <summary>
		/// Returns a new instance of the object contained by the collection
		/// </summary>
		public T Model
		{
			get
			{
				return Activator.CreateInstance<T>();
			}
		}

		/// <summary>
		/// Initializes a new instance of the PagedList class with the items of the informed page
		/// </summary>
		/// <param name="queryable">The collection os objects to be paged</param>
		/// <param name="page">The number of the desired page</param>
		/// <param name="pageSize">The size of each page</param>
		public PagedList(IQueryable<T> queryable, int page, int pageSize)
		{
			ActualPage = page;
			TotalCount = queryable.Count();
			PageCount = (int)Math.Ceiling(TotalCount / (double)pageSize);
			PageCount = PageCount == 0 ? 1 : PageCount;
			PageSize = pageSize;

			int skip = (ActualPage - 1) * pageSize;

			this.AddRange(queryable.Skip(skip).Take(pageSize));
		}

		/// <summary>
		/// Initializes a new instance of the PagedList class with the items of the informed page and ordered by the informed property and direction
		/// </summary>
		/// <param name="queryable">The collection os objects to be paged</param>
		/// <param name="page">The number of the desired page</param>
		/// <param name="pageSize">The size of each page</param>
		/// <param name="orderProperty">The name of property to be ordered by</param>
		/// <param name="orderDirection">The direction of the ordering</param>
		public PagedList(IQueryable<T> queryable, int page, int pageSize, string orderProperty, OrderDirection orderDirection)
		{
			ActualPage = page;
			TotalCount = queryable.Count();
			PageCount = (int)Math.Ceiling(TotalCount / (double)pageSize);
			PageCount = PageCount == 0 ? 1 : PageCount;
			PageSize = pageSize;

			int skip = (ActualPage - 1) * pageSize;

			MemberExpression property = null;
			ParameterExpression parameter = Expression.Parameter(queryable.ElementType, String.Empty);
			if (string.IsNullOrEmpty(orderProperty))
			{
				orderProperty = parameter.Type.GetProperties().First().Name;
			}

			foreach (string propriedade in orderProperty.Split('.'))
			{
				if (property == null)
				{
					property = Expression.Property(parameter, propriedade);
				}
				else
				{
					property = Expression.Property(property, propriedade);
				}
			}

			LambdaExpression lambda = Expression.Lambda(property, parameter);

			string methodName = (orderDirection == OrderDirection.Descending) ? "OrderByDescending" : "OrderBy";

			Expression methodCallExpression = Expression.Call(typeof(Queryable), methodName, new Type[] { queryable.ElementType, property.Type }, queryable.Expression, Expression.Quote(lambda));

			queryable = queryable.Provider.CreateQuery<T>(methodCallExpression);

			this.AddRange(queryable.Skip(skip).Take(pageSize));
		}
	}
}
